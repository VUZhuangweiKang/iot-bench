// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: TestCustomType.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(82d693938e21298f);
CAPNP_DECLARE_SCHEMA(8384f1d80a8a62cb);
CAPNP_DECLARE_SCHEMA(d2c5d1734fd78ce9);
CAPNP_DECLARE_SCHEMA(c918ebd1cc490270);
CAPNP_DECLARE_SCHEMA(f127fe18c5073059);
CAPNP_DECLARE_SCHEMA(ca116072b678bceb);
CAPNP_DECLARE_SCHEMA(c93b8b98d8d54fc1);

}  // namespace schemas
}  // namespace capnp


struct LongSeqTest {
  LongSeqTest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(82d693938e21298f, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DoubleSeqTest {
  DoubleSeqTest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8384f1d80a8a62cb, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StringTest {
  StringTest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2c5d1734fd78ce9, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct StringSeqTest {
  StringSeqTest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c918ebd1cc490270, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ArrayLongSeqTest {
  ArrayLongSeqTest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f127fe18c5073059, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SeqArrayLongSeqTest {
  SeqArrayLongSeqTest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca116072b678bceb, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestCustomType {
  TestCustomType() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c93b8b98d8d54fc1, 1, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class LongSeqTest::Reader {
public:
  typedef LongSeqTest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLongSeq() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getLongSeq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LongSeqTest::Builder {
public:
  typedef LongSeqTest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLongSeq();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getLongSeq();
  inline void setLongSeq( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLongSeq(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initLongSeq(unsigned int size);
  inline void adoptLongSeq(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownLongSeq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LongSeqTest::Pipeline {
public:
  typedef LongSeqTest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DoubleSeqTest::Reader {
public:
  typedef DoubleSeqTest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasDoubleSeq() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getDoubleSeq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DoubleSeqTest::Builder {
public:
  typedef DoubleSeqTest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasDoubleSeq();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getDoubleSeq();
  inline void setDoubleSeq( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDoubleSeq(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initDoubleSeq(unsigned int size);
  inline void adoptDoubleSeq(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownDoubleSeq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DoubleSeqTest::Pipeline {
public:
  typedef DoubleSeqTest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StringTest::Reader {
public:
  typedef StringTest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStr() const;
  inline  ::capnp::Text::Reader getStr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StringTest::Builder {
public:
  typedef StringTest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStr();
  inline  ::capnp::Text::Builder getStr();
  inline void setStr( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initStr(unsigned int size);
  inline void adoptStr(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownStr();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StringTest::Pipeline {
public:
  typedef StringTest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class StringSeqTest::Reader {
public:
  typedef StringSeqTest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasStringSeq() const;
  inline  ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>::Reader getStringSeq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class StringSeqTest::Builder {
public:
  typedef StringSeqTest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasStringSeq();
  inline  ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>::Builder getStringSeq();
  inline void setStringSeq( ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>::Builder initStringSeq(unsigned int size);
  inline void adoptStringSeq(::capnp::Orphan< ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>> disownStringSeq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class StringSeqTest::Pipeline {
public:
  typedef StringSeqTest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ArrayLongSeqTest::Reader {
public:
  typedef ArrayLongSeqTest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasArrayLongSeq() const;
  inline  ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>::Reader getArrayLongSeq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArrayLongSeqTest::Builder {
public:
  typedef ArrayLongSeqTest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasArrayLongSeq();
  inline  ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>::Builder getArrayLongSeq();
  inline void setArrayLongSeq( ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>::Builder initArrayLongSeq(unsigned int size);
  inline void adoptArrayLongSeq(::capnp::Orphan< ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>> disownArrayLongSeq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArrayLongSeqTest::Pipeline {
public:
  typedef ArrayLongSeqTest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SeqArrayLongSeqTest::Reader {
public:
  typedef SeqArrayLongSeqTest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSeqArrayLongSeq() const;
  inline  ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>::Reader getSeqArrayLongSeq() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SeqArrayLongSeqTest::Builder {
public:
  typedef SeqArrayLongSeqTest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSeqArrayLongSeq();
  inline  ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>::Builder getSeqArrayLongSeq();
  inline void setSeqArrayLongSeq( ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>::Builder initSeqArrayLongSeq(unsigned int size);
  inline void adoptSeqArrayLongSeq(::capnp::Orphan< ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>> disownSeqArrayLongSeq();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SeqArrayLongSeqTest::Pipeline {
public:
  typedef SeqArrayLongSeqTest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestCustomType::Reader {
public:
  typedef TestCustomType Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTestLong() const;

  inline bool hasTestOctet() const;
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader getTestOctet() const;

  inline bool hasTestLongSeq() const;
  inline  ::LongSeqTest::Reader getTestLongSeq() const;

  inline bool hasTestString() const;
  inline  ::StringTest::Reader getTestString() const;

  inline bool hasTestStringSeq() const;
  inline  ::StringSeqTest::Reader getTestStringSeq() const;

  inline bool hasTestDoubleSeq() const;
  inline  ::DoubleSeqTest::Reader getTestDoubleSeq() const;

  inline bool hasTestArrayLongSeq() const;
  inline  ::ArrayLongSeqTest::Reader getTestArrayLongSeq() const;

  inline bool hasSeqArrayLongSeqTest() const;
  inline  ::SeqArrayLongSeqTest::Reader getSeqArrayLongSeqTest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestCustomType::Builder {
public:
  typedef TestCustomType Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getTestLong();
  inline void setTestLong( ::int32_t value);

  inline bool hasTestOctet();
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder getTestOctet();
  inline void setTestOctet( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTestOctet(::kj::ArrayPtr<const  ::int8_t> value);
  inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder initTestOctet(unsigned int size);
  inline void adoptTestOctet(::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> disownTestOctet();

  inline bool hasTestLongSeq();
  inline  ::LongSeqTest::Builder getTestLongSeq();
  inline void setTestLongSeq( ::LongSeqTest::Reader value);
  inline  ::LongSeqTest::Builder initTestLongSeq();
  inline void adoptTestLongSeq(::capnp::Orphan< ::LongSeqTest>&& value);
  inline ::capnp::Orphan< ::LongSeqTest> disownTestLongSeq();

  inline bool hasTestString();
  inline  ::StringTest::Builder getTestString();
  inline void setTestString( ::StringTest::Reader value);
  inline  ::StringTest::Builder initTestString();
  inline void adoptTestString(::capnp::Orphan< ::StringTest>&& value);
  inline ::capnp::Orphan< ::StringTest> disownTestString();

  inline bool hasTestStringSeq();
  inline  ::StringSeqTest::Builder getTestStringSeq();
  inline void setTestStringSeq( ::StringSeqTest::Reader value);
  inline  ::StringSeqTest::Builder initTestStringSeq();
  inline void adoptTestStringSeq(::capnp::Orphan< ::StringSeqTest>&& value);
  inline ::capnp::Orphan< ::StringSeqTest> disownTestStringSeq();

  inline bool hasTestDoubleSeq();
  inline  ::DoubleSeqTest::Builder getTestDoubleSeq();
  inline void setTestDoubleSeq( ::DoubleSeqTest::Reader value);
  inline  ::DoubleSeqTest::Builder initTestDoubleSeq();
  inline void adoptTestDoubleSeq(::capnp::Orphan< ::DoubleSeqTest>&& value);
  inline ::capnp::Orphan< ::DoubleSeqTest> disownTestDoubleSeq();

  inline bool hasTestArrayLongSeq();
  inline  ::ArrayLongSeqTest::Builder getTestArrayLongSeq();
  inline void setTestArrayLongSeq( ::ArrayLongSeqTest::Reader value);
  inline  ::ArrayLongSeqTest::Builder initTestArrayLongSeq();
  inline void adoptTestArrayLongSeq(::capnp::Orphan< ::ArrayLongSeqTest>&& value);
  inline ::capnp::Orphan< ::ArrayLongSeqTest> disownTestArrayLongSeq();

  inline bool hasSeqArrayLongSeqTest();
  inline  ::SeqArrayLongSeqTest::Builder getSeqArrayLongSeqTest();
  inline void setSeqArrayLongSeqTest( ::SeqArrayLongSeqTest::Reader value);
  inline  ::SeqArrayLongSeqTest::Builder initSeqArrayLongSeqTest();
  inline void adoptSeqArrayLongSeqTest(::capnp::Orphan< ::SeqArrayLongSeqTest>&& value);
  inline ::capnp::Orphan< ::SeqArrayLongSeqTest> disownSeqArrayLongSeqTest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestCustomType::Pipeline {
public:
  typedef TestCustomType Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::LongSeqTest::Pipeline getTestLongSeq();
  inline  ::StringTest::Pipeline getTestString();
  inline  ::StringSeqTest::Pipeline getTestStringSeq();
  inline  ::DoubleSeqTest::Pipeline getTestDoubleSeq();
  inline  ::ArrayLongSeqTest::Pipeline getTestArrayLongSeq();
  inline  ::SeqArrayLongSeqTest::Pipeline getSeqArrayLongSeqTest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool LongSeqTest::Reader::hasLongSeq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LongSeqTest::Builder::hasLongSeq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader LongSeqTest::Reader::getLongSeq() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder LongSeqTest::Builder::getLongSeq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LongSeqTest::Builder::setLongSeq( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void LongSeqTest::Builder::setLongSeq(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder LongSeqTest::Builder::initLongSeq(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LongSeqTest::Builder::adoptLongSeq(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> LongSeqTest::Builder::disownLongSeq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool DoubleSeqTest::Reader::hasDoubleSeq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool DoubleSeqTest::Builder::hasDoubleSeq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader DoubleSeqTest::Reader::getDoubleSeq() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder DoubleSeqTest::Builder::getDoubleSeq() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void DoubleSeqTest::Builder::setDoubleSeq( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void DoubleSeqTest::Builder::setDoubleSeq(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder DoubleSeqTest::Builder::initDoubleSeq(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void DoubleSeqTest::Builder::adoptDoubleSeq(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> DoubleSeqTest::Builder::disownDoubleSeq() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StringTest::Reader::hasStr() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StringTest::Builder::hasStr() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader StringTest::Reader::getStr() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder StringTest::Builder::getStr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StringTest::Builder::setStr( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder StringTest::Builder::initStr(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StringTest::Builder::adoptStr(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> StringTest::Builder::disownStr() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool StringSeqTest::Reader::hasStringSeq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool StringSeqTest::Builder::hasStringSeq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>::Reader StringSeqTest::Reader::getStringSeq() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>::Builder StringSeqTest::Builder::getStringSeq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void StringSeqTest::Builder::setStringSeq( ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>::Builder StringSeqTest::Builder::initStringSeq(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void StringSeqTest::Builder::adoptStringSeq(
    ::capnp::Orphan< ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>> StringSeqTest::Builder::disownStringSeq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::StringTest,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayLongSeqTest::Reader::hasArrayLongSeq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ArrayLongSeqTest::Builder::hasArrayLongSeq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>::Reader ArrayLongSeqTest::Reader::getArrayLongSeq() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>::Builder ArrayLongSeqTest::Builder::getArrayLongSeq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayLongSeqTest::Builder::setArrayLongSeq( ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>::Builder ArrayLongSeqTest::Builder::initArrayLongSeq(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ArrayLongSeqTest::Builder::adoptArrayLongSeq(
    ::capnp::Orphan< ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>> ArrayLongSeqTest::Builder::disownArrayLongSeq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::LongSeqTest,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool SeqArrayLongSeqTest::Reader::hasSeqArrayLongSeq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SeqArrayLongSeqTest::Builder::hasSeqArrayLongSeq() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>::Reader SeqArrayLongSeqTest::Reader::getSeqArrayLongSeq() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>::Builder SeqArrayLongSeqTest::Builder::getSeqArrayLongSeq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SeqArrayLongSeqTest::Builder::setSeqArrayLongSeq( ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>::Builder SeqArrayLongSeqTest::Builder::initSeqArrayLongSeq(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SeqArrayLongSeqTest::Builder::adoptSeqArrayLongSeq(
    ::capnp::Orphan< ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>> SeqArrayLongSeqTest::Builder::disownSeqArrayLongSeq() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ArrayLongSeqTest,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t TestCustomType::Reader::getTestLong() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TestCustomType::Builder::getTestLong() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TestCustomType::Builder::setTestLong( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TestCustomType::Reader::hasTestOctet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TestCustomType::Builder::hasTestOctet() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader TestCustomType::Reader::getTestOctet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder TestCustomType::Builder::getTestOctet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestCustomType::Builder::setTestOctet( ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void TestCustomType::Builder::setTestOctet(::kj::ArrayPtr<const  ::int8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>::Builder TestCustomType::Builder::initTestOctet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TestCustomType::Builder::adoptTestOctet(
    ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>> TestCustomType::Builder::disownTestOctet() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TestCustomType::Reader::hasTestLongSeq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TestCustomType::Builder::hasTestLongSeq() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::LongSeqTest::Reader TestCustomType::Reader::getTestLongSeq() const {
  return ::capnp::_::PointerHelpers< ::LongSeqTest>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::LongSeqTest::Builder TestCustomType::Builder::getTestLongSeq() {
  return ::capnp::_::PointerHelpers< ::LongSeqTest>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::LongSeqTest::Pipeline TestCustomType::Pipeline::getTestLongSeq() {
  return  ::LongSeqTest::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TestCustomType::Builder::setTestLongSeq( ::LongSeqTest::Reader value) {
  ::capnp::_::PointerHelpers< ::LongSeqTest>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::LongSeqTest::Builder TestCustomType::Builder::initTestLongSeq() {
  return ::capnp::_::PointerHelpers< ::LongSeqTest>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TestCustomType::Builder::adoptTestLongSeq(
    ::capnp::Orphan< ::LongSeqTest>&& value) {
  ::capnp::_::PointerHelpers< ::LongSeqTest>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::LongSeqTest> TestCustomType::Builder::disownTestLongSeq() {
  return ::capnp::_::PointerHelpers< ::LongSeqTest>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TestCustomType::Reader::hasTestString() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TestCustomType::Builder::hasTestString() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::StringTest::Reader TestCustomType::Reader::getTestString() const {
  return ::capnp::_::PointerHelpers< ::StringTest>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::StringTest::Builder TestCustomType::Builder::getTestString() {
  return ::capnp::_::PointerHelpers< ::StringTest>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::StringTest::Pipeline TestCustomType::Pipeline::getTestString() {
  return  ::StringTest::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void TestCustomType::Builder::setTestString( ::StringTest::Reader value) {
  ::capnp::_::PointerHelpers< ::StringTest>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::StringTest::Builder TestCustomType::Builder::initTestString() {
  return ::capnp::_::PointerHelpers< ::StringTest>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TestCustomType::Builder::adoptTestString(
    ::capnp::Orphan< ::StringTest>&& value) {
  ::capnp::_::PointerHelpers< ::StringTest>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::StringTest> TestCustomType::Builder::disownTestString() {
  return ::capnp::_::PointerHelpers< ::StringTest>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TestCustomType::Reader::hasTestStringSeq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TestCustomType::Builder::hasTestStringSeq() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::StringSeqTest::Reader TestCustomType::Reader::getTestStringSeq() const {
  return ::capnp::_::PointerHelpers< ::StringSeqTest>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::StringSeqTest::Builder TestCustomType::Builder::getTestStringSeq() {
  return ::capnp::_::PointerHelpers< ::StringSeqTest>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::StringSeqTest::Pipeline TestCustomType::Pipeline::getTestStringSeq() {
  return  ::StringSeqTest::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void TestCustomType::Builder::setTestStringSeq( ::StringSeqTest::Reader value) {
  ::capnp::_::PointerHelpers< ::StringSeqTest>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::StringSeqTest::Builder TestCustomType::Builder::initTestStringSeq() {
  return ::capnp::_::PointerHelpers< ::StringSeqTest>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TestCustomType::Builder::adoptTestStringSeq(
    ::capnp::Orphan< ::StringSeqTest>&& value) {
  ::capnp::_::PointerHelpers< ::StringSeqTest>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::StringSeqTest> TestCustomType::Builder::disownTestStringSeq() {
  return ::capnp::_::PointerHelpers< ::StringSeqTest>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TestCustomType::Reader::hasTestDoubleSeq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TestCustomType::Builder::hasTestDoubleSeq() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::DoubleSeqTest::Reader TestCustomType::Reader::getTestDoubleSeq() const {
  return ::capnp::_::PointerHelpers< ::DoubleSeqTest>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::DoubleSeqTest::Builder TestCustomType::Builder::getTestDoubleSeq() {
  return ::capnp::_::PointerHelpers< ::DoubleSeqTest>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::DoubleSeqTest::Pipeline TestCustomType::Pipeline::getTestDoubleSeq() {
  return  ::DoubleSeqTest::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void TestCustomType::Builder::setTestDoubleSeq( ::DoubleSeqTest::Reader value) {
  ::capnp::_::PointerHelpers< ::DoubleSeqTest>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::DoubleSeqTest::Builder TestCustomType::Builder::initTestDoubleSeq() {
  return ::capnp::_::PointerHelpers< ::DoubleSeqTest>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TestCustomType::Builder::adoptTestDoubleSeq(
    ::capnp::Orphan< ::DoubleSeqTest>&& value) {
  ::capnp::_::PointerHelpers< ::DoubleSeqTest>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::DoubleSeqTest> TestCustomType::Builder::disownTestDoubleSeq() {
  return ::capnp::_::PointerHelpers< ::DoubleSeqTest>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool TestCustomType::Reader::hasTestArrayLongSeq() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool TestCustomType::Builder::hasTestArrayLongSeq() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::ArrayLongSeqTest::Reader TestCustomType::Reader::getTestArrayLongSeq() const {
  return ::capnp::_::PointerHelpers< ::ArrayLongSeqTest>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::ArrayLongSeqTest::Builder TestCustomType::Builder::getTestArrayLongSeq() {
  return ::capnp::_::PointerHelpers< ::ArrayLongSeqTest>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::ArrayLongSeqTest::Pipeline TestCustomType::Pipeline::getTestArrayLongSeq() {
  return  ::ArrayLongSeqTest::Pipeline(_typeless.getPointerField(5));
}
#endif  // !CAPNP_LITE
inline void TestCustomType::Builder::setTestArrayLongSeq( ::ArrayLongSeqTest::Reader value) {
  ::capnp::_::PointerHelpers< ::ArrayLongSeqTest>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::ArrayLongSeqTest::Builder TestCustomType::Builder::initTestArrayLongSeq() {
  return ::capnp::_::PointerHelpers< ::ArrayLongSeqTest>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void TestCustomType::Builder::adoptTestArrayLongSeq(
    ::capnp::Orphan< ::ArrayLongSeqTest>&& value) {
  ::capnp::_::PointerHelpers< ::ArrayLongSeqTest>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::ArrayLongSeqTest> TestCustomType::Builder::disownTestArrayLongSeq() {
  return ::capnp::_::PointerHelpers< ::ArrayLongSeqTest>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool TestCustomType::Reader::hasSeqArrayLongSeqTest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool TestCustomType::Builder::hasSeqArrayLongSeqTest() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::SeqArrayLongSeqTest::Reader TestCustomType::Reader::getSeqArrayLongSeqTest() const {
  return ::capnp::_::PointerHelpers< ::SeqArrayLongSeqTest>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::SeqArrayLongSeqTest::Builder TestCustomType::Builder::getSeqArrayLongSeqTest() {
  return ::capnp::_::PointerHelpers< ::SeqArrayLongSeqTest>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::SeqArrayLongSeqTest::Pipeline TestCustomType::Pipeline::getSeqArrayLongSeqTest() {
  return  ::SeqArrayLongSeqTest::Pipeline(_typeless.getPointerField(6));
}
#endif  // !CAPNP_LITE
inline void TestCustomType::Builder::setSeqArrayLongSeqTest( ::SeqArrayLongSeqTest::Reader value) {
  ::capnp::_::PointerHelpers< ::SeqArrayLongSeqTest>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::SeqArrayLongSeqTest::Builder TestCustomType::Builder::initSeqArrayLongSeqTest() {
  return ::capnp::_::PointerHelpers< ::SeqArrayLongSeqTest>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void TestCustomType::Builder::adoptSeqArrayLongSeqTest(
    ::capnp::Orphan< ::SeqArrayLongSeqTest>&& value) {
  ::capnp::_::PointerHelpers< ::SeqArrayLongSeqTest>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SeqArrayLongSeqTest> TestCustomType::Builder::disownSeqArrayLongSeqTest() {
  return ::capnp::_::PointerHelpers< ::SeqArrayLongSeqTest>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}


