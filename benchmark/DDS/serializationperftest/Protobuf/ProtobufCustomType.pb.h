// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufCustomType.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ProtobufCustomType_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ProtobufCustomType_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ProtobufCustomType_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ProtobufCustomType_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtobufCustomType_2eproto;
namespace myprotobuf {
class ArrayLongSeqTest;
class ArrayLongSeqTestDefaultTypeInternal;
extern ArrayLongSeqTestDefaultTypeInternal _ArrayLongSeqTest_default_instance_;
class DoubleSeqTest;
class DoubleSeqTestDefaultTypeInternal;
extern DoubleSeqTestDefaultTypeInternal _DoubleSeqTest_default_instance_;
class LongSeqTest;
class LongSeqTestDefaultTypeInternal;
extern LongSeqTestDefaultTypeInternal _LongSeqTest_default_instance_;
class Octet;
class OctetDefaultTypeInternal;
extern OctetDefaultTypeInternal _Octet_default_instance_;
class SeqArrayLongSeqTest;
class SeqArrayLongSeqTestDefaultTypeInternal;
extern SeqArrayLongSeqTestDefaultTypeInternal _SeqArrayLongSeqTest_default_instance_;
class StringSeqTest;
class StringSeqTestDefaultTypeInternal;
extern StringSeqTestDefaultTypeInternal _StringSeqTest_default_instance_;
class StringTest;
class StringTestDefaultTypeInternal;
extern StringTestDefaultTypeInternal _StringTest_default_instance_;
class TestCustomType;
class TestCustomTypeDefaultTypeInternal;
extern TestCustomTypeDefaultTypeInternal _TestCustomType_default_instance_;
}  // namespace myprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> ::myprotobuf::ArrayLongSeqTest* Arena::CreateMaybeMessage<::myprotobuf::ArrayLongSeqTest>(Arena*);
template<> ::myprotobuf::DoubleSeqTest* Arena::CreateMaybeMessage<::myprotobuf::DoubleSeqTest>(Arena*);
template<> ::myprotobuf::LongSeqTest* Arena::CreateMaybeMessage<::myprotobuf::LongSeqTest>(Arena*);
template<> ::myprotobuf::Octet* Arena::CreateMaybeMessage<::myprotobuf::Octet>(Arena*);
template<> ::myprotobuf::SeqArrayLongSeqTest* Arena::CreateMaybeMessage<::myprotobuf::SeqArrayLongSeqTest>(Arena*);
template<> ::myprotobuf::StringSeqTest* Arena::CreateMaybeMessage<::myprotobuf::StringSeqTest>(Arena*);
template<> ::myprotobuf::StringTest* Arena::CreateMaybeMessage<::myprotobuf::StringTest>(Arena*);
template<> ::myprotobuf::TestCustomType* Arena::CreateMaybeMessage<::myprotobuf::TestCustomType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace myprotobuf {

// ===================================================================

class Octet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myprotobuf.Octet) */ {
 public:
  Octet();
  virtual ~Octet();

  Octet(const Octet& from);
  Octet(Octet&& from) noexcept
    : Octet() {
    *this = ::std::move(from);
  }

  inline Octet& operator=(const Octet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Octet& operator=(Octet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Octet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Octet* internal_default_instance() {
    return reinterpret_cast<const Octet*>(
               &_Octet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Octet& a, Octet& b) {
    a.Swap(&b);
  }
  inline void Swap(Octet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Octet* New() const final {
    return CreateMaybeMessage<Octet>(nullptr);
  }

  Octet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Octet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Octet& from);
  void MergeFrom(const Octet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Octet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myprotobuf.Octet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobufCustomType_2eproto);
    return ::descriptor_table_ProtobufCustomType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOctetFieldNumber = 1,
  };
  // bytes octet = 1;
  void clear_octet();
  const std::string& octet() const;
  void set_octet(const std::string& value);
  void set_octet(std::string&& value);
  void set_octet(const char* value);
  void set_octet(const void* value, size_t size);
  std::string* mutable_octet();
  std::string* release_octet();
  void set_allocated_octet(std::string* octet);
  private:
  const std::string& _internal_octet() const;
  void _internal_set_octet(const std::string& value);
  std::string* _internal_mutable_octet();
  public:

  // @@protoc_insertion_point(class_scope:myprotobuf.Octet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr octet_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufCustomType_2eproto;
};
// -------------------------------------------------------------------

class LongSeqTest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myprotobuf.LongSeqTest) */ {
 public:
  LongSeqTest();
  virtual ~LongSeqTest();

  LongSeqTest(const LongSeqTest& from);
  LongSeqTest(LongSeqTest&& from) noexcept
    : LongSeqTest() {
    *this = ::std::move(from);
  }

  inline LongSeqTest& operator=(const LongSeqTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LongSeqTest& operator=(LongSeqTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LongSeqTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LongSeqTest* internal_default_instance() {
    return reinterpret_cast<const LongSeqTest*>(
               &_LongSeqTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LongSeqTest& a, LongSeqTest& b) {
    a.Swap(&b);
  }
  inline void Swap(LongSeqTest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LongSeqTest* New() const final {
    return CreateMaybeMessage<LongSeqTest>(nullptr);
  }

  LongSeqTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LongSeqTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LongSeqTest& from);
  void MergeFrom(const LongSeqTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LongSeqTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myprotobuf.LongSeqTest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobufCustomType_2eproto);
    return ::descriptor_table_ProtobufCustomType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongMemFieldNumber = 1,
  };
  // repeated sfixed32 long_mem = 1;
  int long_mem_size() const;
  private:
  int _internal_long_mem_size() const;
  public:
  void clear_long_mem();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_long_mem(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_long_mem() const;
  void _internal_add_long_mem(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_long_mem();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 long_mem(int index) const;
  void set_long_mem(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_long_mem(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      long_mem() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_long_mem();

  // @@protoc_insertion_point(class_scope:myprotobuf.LongSeqTest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > long_mem_;
  mutable std::atomic<int> _long_mem_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufCustomType_2eproto;
};
// -------------------------------------------------------------------

class DoubleSeqTest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myprotobuf.DoubleSeqTest) */ {
 public:
  DoubleSeqTest();
  virtual ~DoubleSeqTest();

  DoubleSeqTest(const DoubleSeqTest& from);
  DoubleSeqTest(DoubleSeqTest&& from) noexcept
    : DoubleSeqTest() {
    *this = ::std::move(from);
  }

  inline DoubleSeqTest& operator=(const DoubleSeqTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoubleSeqTest& operator=(DoubleSeqTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DoubleSeqTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DoubleSeqTest* internal_default_instance() {
    return reinterpret_cast<const DoubleSeqTest*>(
               &_DoubleSeqTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DoubleSeqTest& a, DoubleSeqTest& b) {
    a.Swap(&b);
  }
  inline void Swap(DoubleSeqTest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DoubleSeqTest* New() const final {
    return CreateMaybeMessage<DoubleSeqTest>(nullptr);
  }

  DoubleSeqTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DoubleSeqTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DoubleSeqTest& from);
  void MergeFrom(const DoubleSeqTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoubleSeqTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myprotobuf.DoubleSeqTest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobufCustomType_2eproto);
    return ::descriptor_table_ProtobufCustomType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleMemFieldNumber = 1,
  };
  // repeated double double_mem = 1;
  int double_mem_size() const;
  private:
  int _internal_double_mem_size() const;
  public:
  void clear_double_mem();
  private:
  double _internal_double_mem(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_mem() const;
  void _internal_add_double_mem(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_mem();
  public:
  double double_mem(int index) const;
  void set_double_mem(int index, double value);
  void add_double_mem(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_mem() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_mem();

  // @@protoc_insertion_point(class_scope:myprotobuf.DoubleSeqTest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_mem_;
  mutable std::atomic<int> _double_mem_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufCustomType_2eproto;
};
// -------------------------------------------------------------------

class StringTest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myprotobuf.StringTest) */ {
 public:
  StringTest();
  virtual ~StringTest();

  StringTest(const StringTest& from);
  StringTest(StringTest&& from) noexcept
    : StringTest() {
    *this = ::std::move(from);
  }

  inline StringTest& operator=(const StringTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringTest& operator=(StringTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringTest* internal_default_instance() {
    return reinterpret_cast<const StringTest*>(
               &_StringTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StringTest& a, StringTest& b) {
    a.Swap(&b);
  }
  inline void Swap(StringTest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringTest* New() const final {
    return CreateMaybeMessage<StringTest>(nullptr);
  }

  StringTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringTest& from);
  void MergeFrom(const StringTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myprotobuf.StringTest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobufCustomType_2eproto);
    return ::descriptor_table_ProtobufCustomType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharMemFieldNumber = 1,
  };
  // repeated bytes char_mem = 1;
  int char_mem_size() const;
  private:
  int _internal_char_mem_size() const;
  public:
  void clear_char_mem();
  const std::string& char_mem(int index) const;
  std::string* mutable_char_mem(int index);
  void set_char_mem(int index, const std::string& value);
  void set_char_mem(int index, std::string&& value);
  void set_char_mem(int index, const char* value);
  void set_char_mem(int index, const void* value, size_t size);
  std::string* add_char_mem();
  void add_char_mem(const std::string& value);
  void add_char_mem(std::string&& value);
  void add_char_mem(const char* value);
  void add_char_mem(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& char_mem() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_char_mem();
  private:
  const std::string& _internal_char_mem(int index) const;
  std::string* _internal_add_char_mem();
  public:

  // @@protoc_insertion_point(class_scope:myprotobuf.StringTest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> char_mem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufCustomType_2eproto;
};
// -------------------------------------------------------------------

class StringSeqTest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myprotobuf.StringSeqTest) */ {
 public:
  StringSeqTest();
  virtual ~StringSeqTest();

  StringSeqTest(const StringSeqTest& from);
  StringSeqTest(StringSeqTest&& from) noexcept
    : StringSeqTest() {
    *this = ::std::move(from);
  }

  inline StringSeqTest& operator=(const StringSeqTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringSeqTest& operator=(StringSeqTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StringSeqTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StringSeqTest* internal_default_instance() {
    return reinterpret_cast<const StringSeqTest*>(
               &_StringSeqTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StringSeqTest& a, StringSeqTest& b) {
    a.Swap(&b);
  }
  inline void Swap(StringSeqTest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StringSeqTest* New() const final {
    return CreateMaybeMessage<StringSeqTest>(nullptr);
  }

  StringSeqTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StringSeqTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StringSeqTest& from);
  void MergeFrom(const StringSeqTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StringSeqTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myprotobuf.StringSeqTest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobufCustomType_2eproto);
    return ::descriptor_table_ProtobufCustomType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringMemFieldNumber = 1,
  };
  // repeated .myprotobuf.StringTest string_mem = 1;
  int string_mem_size() const;
  private:
  int _internal_string_mem_size() const;
  public:
  void clear_string_mem();
  ::myprotobuf::StringTest* mutable_string_mem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::StringTest >*
      mutable_string_mem();
  private:
  const ::myprotobuf::StringTest& _internal_string_mem(int index) const;
  ::myprotobuf::StringTest* _internal_add_string_mem();
  public:
  const ::myprotobuf::StringTest& string_mem(int index) const;
  ::myprotobuf::StringTest* add_string_mem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::StringTest >&
      string_mem() const;

  // @@protoc_insertion_point(class_scope:myprotobuf.StringSeqTest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::StringTest > string_mem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufCustomType_2eproto;
};
// -------------------------------------------------------------------

class ArrayLongSeqTest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myprotobuf.ArrayLongSeqTest) */ {
 public:
  ArrayLongSeqTest();
  virtual ~ArrayLongSeqTest();

  ArrayLongSeqTest(const ArrayLongSeqTest& from);
  ArrayLongSeqTest(ArrayLongSeqTest&& from) noexcept
    : ArrayLongSeqTest() {
    *this = ::std::move(from);
  }

  inline ArrayLongSeqTest& operator=(const ArrayLongSeqTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ArrayLongSeqTest& operator=(ArrayLongSeqTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ArrayLongSeqTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ArrayLongSeqTest* internal_default_instance() {
    return reinterpret_cast<const ArrayLongSeqTest*>(
               &_ArrayLongSeqTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ArrayLongSeqTest& a, ArrayLongSeqTest& b) {
    a.Swap(&b);
  }
  inline void Swap(ArrayLongSeqTest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ArrayLongSeqTest* New() const final {
    return CreateMaybeMessage<ArrayLongSeqTest>(nullptr);
  }

  ArrayLongSeqTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ArrayLongSeqTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ArrayLongSeqTest& from);
  void MergeFrom(const ArrayLongSeqTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ArrayLongSeqTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myprotobuf.ArrayLongSeqTest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobufCustomType_2eproto);
    return ::descriptor_table_ProtobufCustomType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongSeqMemFieldNumber = 1,
  };
  // repeated .myprotobuf.LongSeqTest long_seq_mem = 1;
  int long_seq_mem_size() const;
  private:
  int _internal_long_seq_mem_size() const;
  public:
  void clear_long_seq_mem();
  ::myprotobuf::LongSeqTest* mutable_long_seq_mem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::LongSeqTest >*
      mutable_long_seq_mem();
  private:
  const ::myprotobuf::LongSeqTest& _internal_long_seq_mem(int index) const;
  ::myprotobuf::LongSeqTest* _internal_add_long_seq_mem();
  public:
  const ::myprotobuf::LongSeqTest& long_seq_mem(int index) const;
  ::myprotobuf::LongSeqTest* add_long_seq_mem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::LongSeqTest >&
      long_seq_mem() const;

  // @@protoc_insertion_point(class_scope:myprotobuf.ArrayLongSeqTest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::LongSeqTest > long_seq_mem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufCustomType_2eproto;
};
// -------------------------------------------------------------------

class SeqArrayLongSeqTest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myprotobuf.SeqArrayLongSeqTest) */ {
 public:
  SeqArrayLongSeqTest();
  virtual ~SeqArrayLongSeqTest();

  SeqArrayLongSeqTest(const SeqArrayLongSeqTest& from);
  SeqArrayLongSeqTest(SeqArrayLongSeqTest&& from) noexcept
    : SeqArrayLongSeqTest() {
    *this = ::std::move(from);
  }

  inline SeqArrayLongSeqTest& operator=(const SeqArrayLongSeqTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeqArrayLongSeqTest& operator=(SeqArrayLongSeqTest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeqArrayLongSeqTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeqArrayLongSeqTest* internal_default_instance() {
    return reinterpret_cast<const SeqArrayLongSeqTest*>(
               &_SeqArrayLongSeqTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SeqArrayLongSeqTest& a, SeqArrayLongSeqTest& b) {
    a.Swap(&b);
  }
  inline void Swap(SeqArrayLongSeqTest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeqArrayLongSeqTest* New() const final {
    return CreateMaybeMessage<SeqArrayLongSeqTest>(nullptr);
  }

  SeqArrayLongSeqTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeqArrayLongSeqTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeqArrayLongSeqTest& from);
  void MergeFrom(const SeqArrayLongSeqTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeqArrayLongSeqTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myprotobuf.SeqArrayLongSeqTest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobufCustomType_2eproto);
    return ::descriptor_table_ProtobufCustomType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayLongSeqMemFieldNumber = 1,
  };
  // repeated .myprotobuf.ArrayLongSeqTest array_long_seq_mem = 1;
  int array_long_seq_mem_size() const;
  private:
  int _internal_array_long_seq_mem_size() const;
  public:
  void clear_array_long_seq_mem();
  ::myprotobuf::ArrayLongSeqTest* mutable_array_long_seq_mem(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::ArrayLongSeqTest >*
      mutable_array_long_seq_mem();
  private:
  const ::myprotobuf::ArrayLongSeqTest& _internal_array_long_seq_mem(int index) const;
  ::myprotobuf::ArrayLongSeqTest* _internal_add_array_long_seq_mem();
  public:
  const ::myprotobuf::ArrayLongSeqTest& array_long_seq_mem(int index) const;
  ::myprotobuf::ArrayLongSeqTest* add_array_long_seq_mem();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::ArrayLongSeqTest >&
      array_long_seq_mem() const;

  // @@protoc_insertion_point(class_scope:myprotobuf.SeqArrayLongSeqTest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::ArrayLongSeqTest > array_long_seq_mem_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufCustomType_2eproto;
};
// -------------------------------------------------------------------

class TestCustomType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myprotobuf.TestCustomType) */ {
 public:
  TestCustomType();
  virtual ~TestCustomType();

  TestCustomType(const TestCustomType& from);
  TestCustomType(TestCustomType&& from) noexcept
    : TestCustomType() {
    *this = ::std::move(from);
  }

  inline TestCustomType& operator=(const TestCustomType& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestCustomType& operator=(TestCustomType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestCustomType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestCustomType* internal_default_instance() {
    return reinterpret_cast<const TestCustomType*>(
               &_TestCustomType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TestCustomType& a, TestCustomType& b) {
    a.Swap(&b);
  }
  inline void Swap(TestCustomType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestCustomType* New() const final {
    return CreateMaybeMessage<TestCustomType>(nullptr);
  }

  TestCustomType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestCustomType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestCustomType& from);
  void MergeFrom(const TestCustomType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestCustomType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myprotobuf.TestCustomType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ProtobufCustomType_2eproto);
    return ::descriptor_table_ProtobufCustomType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestOctetFieldNumber = 2,
    kTestLongSeqFieldNumber = 3,
    kTestStringFieldNumber = 4,
    kTestStringSeqFieldNumber = 5,
    kTestDoubleSeqFieldNumber = 6,
    kTestArrayLongSeqFieldNumber = 7,
    kSeqArrayLongSeqTestFieldNumber = 8,
    kTestLongFieldNumber = 1,
  };
  // repeated .myprotobuf.Octet test_octet = 2;
  int test_octet_size() const;
  private:
  int _internal_test_octet_size() const;
  public:
  void clear_test_octet();
  ::myprotobuf::Octet* mutable_test_octet(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::Octet >*
      mutable_test_octet();
  private:
  const ::myprotobuf::Octet& _internal_test_octet(int index) const;
  ::myprotobuf::Octet* _internal_add_test_octet();
  public:
  const ::myprotobuf::Octet& test_octet(int index) const;
  ::myprotobuf::Octet* add_test_octet();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::Octet >&
      test_octet() const;

  // .myprotobuf.LongSeqTest test_long_seq = 3;
  bool has_test_long_seq() const;
  private:
  bool _internal_has_test_long_seq() const;
  public:
  void clear_test_long_seq();
  const ::myprotobuf::LongSeqTest& test_long_seq() const;
  ::myprotobuf::LongSeqTest* release_test_long_seq();
  ::myprotobuf::LongSeqTest* mutable_test_long_seq();
  void set_allocated_test_long_seq(::myprotobuf::LongSeqTest* test_long_seq);
  private:
  const ::myprotobuf::LongSeqTest& _internal_test_long_seq() const;
  ::myprotobuf::LongSeqTest* _internal_mutable_test_long_seq();
  public:

  // .myprotobuf.StringTest test_string = 4;
  bool has_test_string() const;
  private:
  bool _internal_has_test_string() const;
  public:
  void clear_test_string();
  const ::myprotobuf::StringTest& test_string() const;
  ::myprotobuf::StringTest* release_test_string();
  ::myprotobuf::StringTest* mutable_test_string();
  void set_allocated_test_string(::myprotobuf::StringTest* test_string);
  private:
  const ::myprotobuf::StringTest& _internal_test_string() const;
  ::myprotobuf::StringTest* _internal_mutable_test_string();
  public:

  // .myprotobuf.StringSeqTest test_string_seq = 5;
  bool has_test_string_seq() const;
  private:
  bool _internal_has_test_string_seq() const;
  public:
  void clear_test_string_seq();
  const ::myprotobuf::StringSeqTest& test_string_seq() const;
  ::myprotobuf::StringSeqTest* release_test_string_seq();
  ::myprotobuf::StringSeqTest* mutable_test_string_seq();
  void set_allocated_test_string_seq(::myprotobuf::StringSeqTest* test_string_seq);
  private:
  const ::myprotobuf::StringSeqTest& _internal_test_string_seq() const;
  ::myprotobuf::StringSeqTest* _internal_mutable_test_string_seq();
  public:

  // .myprotobuf.DoubleSeqTest test_double_seq = 6;
  bool has_test_double_seq() const;
  private:
  bool _internal_has_test_double_seq() const;
  public:
  void clear_test_double_seq();
  const ::myprotobuf::DoubleSeqTest& test_double_seq() const;
  ::myprotobuf::DoubleSeqTest* release_test_double_seq();
  ::myprotobuf::DoubleSeqTest* mutable_test_double_seq();
  void set_allocated_test_double_seq(::myprotobuf::DoubleSeqTest* test_double_seq);
  private:
  const ::myprotobuf::DoubleSeqTest& _internal_test_double_seq() const;
  ::myprotobuf::DoubleSeqTest* _internal_mutable_test_double_seq();
  public:

  // .myprotobuf.ArrayLongSeqTest test_array_long_seq = 7;
  bool has_test_array_long_seq() const;
  private:
  bool _internal_has_test_array_long_seq() const;
  public:
  void clear_test_array_long_seq();
  const ::myprotobuf::ArrayLongSeqTest& test_array_long_seq() const;
  ::myprotobuf::ArrayLongSeqTest* release_test_array_long_seq();
  ::myprotobuf::ArrayLongSeqTest* mutable_test_array_long_seq();
  void set_allocated_test_array_long_seq(::myprotobuf::ArrayLongSeqTest* test_array_long_seq);
  private:
  const ::myprotobuf::ArrayLongSeqTest& _internal_test_array_long_seq() const;
  ::myprotobuf::ArrayLongSeqTest* _internal_mutable_test_array_long_seq();
  public:

  // .myprotobuf.SeqArrayLongSeqTest seq_array_long_seq_test = 8;
  bool has_seq_array_long_seq_test() const;
  private:
  bool _internal_has_seq_array_long_seq_test() const;
  public:
  void clear_seq_array_long_seq_test();
  const ::myprotobuf::SeqArrayLongSeqTest& seq_array_long_seq_test() const;
  ::myprotobuf::SeqArrayLongSeqTest* release_seq_array_long_seq_test();
  ::myprotobuf::SeqArrayLongSeqTest* mutable_seq_array_long_seq_test();
  void set_allocated_seq_array_long_seq_test(::myprotobuf::SeqArrayLongSeqTest* seq_array_long_seq_test);
  private:
  const ::myprotobuf::SeqArrayLongSeqTest& _internal_seq_array_long_seq_test() const;
  ::myprotobuf::SeqArrayLongSeqTest* _internal_mutable_seq_array_long_seq_test();
  public:

  // sfixed32 test_long = 1;
  void clear_test_long();
  ::PROTOBUF_NAMESPACE_ID::int32 test_long() const;
  void set_test_long(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_test_long() const;
  void _internal_set_test_long(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myprotobuf.TestCustomType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::Octet > test_octet_;
  ::myprotobuf::LongSeqTest* test_long_seq_;
  ::myprotobuf::StringTest* test_string_;
  ::myprotobuf::StringSeqTest* test_string_seq_;
  ::myprotobuf::DoubleSeqTest* test_double_seq_;
  ::myprotobuf::ArrayLongSeqTest* test_array_long_seq_;
  ::myprotobuf::SeqArrayLongSeqTest* seq_array_long_seq_test_;
  ::PROTOBUF_NAMESPACE_ID::int32 test_long_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ProtobufCustomType_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Octet

// bytes octet = 1;
inline void Octet::clear_octet() {
  octet_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Octet::octet() const {
  // @@protoc_insertion_point(field_get:myprotobuf.Octet.octet)
  return _internal_octet();
}
inline void Octet::set_octet(const std::string& value) {
  _internal_set_octet(value);
  // @@protoc_insertion_point(field_set:myprotobuf.Octet.octet)
}
inline std::string* Octet::mutable_octet() {
  // @@protoc_insertion_point(field_mutable:myprotobuf.Octet.octet)
  return _internal_mutable_octet();
}
inline const std::string& Octet::_internal_octet() const {
  return octet_.GetNoArena();
}
inline void Octet::_internal_set_octet(const std::string& value) {
  
  octet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Octet::set_octet(std::string&& value) {
  
  octet_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:myprotobuf.Octet.octet)
}
inline void Octet::set_octet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  octet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:myprotobuf.Octet.octet)
}
inline void Octet::set_octet(const void* value, size_t size) {
  
  octet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:myprotobuf.Octet.octet)
}
inline std::string* Octet::_internal_mutable_octet() {
  
  return octet_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Octet::release_octet() {
  // @@protoc_insertion_point(field_release:myprotobuf.Octet.octet)
  
  return octet_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Octet::set_allocated_octet(std::string* octet) {
  if (octet != nullptr) {
    
  } else {
    
  }
  octet_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), octet);
  // @@protoc_insertion_point(field_set_allocated:myprotobuf.Octet.octet)
}

// -------------------------------------------------------------------

// LongSeqTest

// repeated sfixed32 long_mem = 1;
inline int LongSeqTest::_internal_long_mem_size() const {
  return long_mem_.size();
}
inline int LongSeqTest::long_mem_size() const {
  return _internal_long_mem_size();
}
inline void LongSeqTest::clear_long_mem() {
  long_mem_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LongSeqTest::_internal_long_mem(int index) const {
  return long_mem_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LongSeqTest::long_mem(int index) const {
  // @@protoc_insertion_point(field_get:myprotobuf.LongSeqTest.long_mem)
  return _internal_long_mem(index);
}
inline void LongSeqTest::set_long_mem(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  long_mem_.Set(index, value);
  // @@protoc_insertion_point(field_set:myprotobuf.LongSeqTest.long_mem)
}
inline void LongSeqTest::_internal_add_long_mem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  long_mem_.Add(value);
}
inline void LongSeqTest::add_long_mem(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_long_mem(value);
  // @@protoc_insertion_point(field_add:myprotobuf.LongSeqTest.long_mem)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LongSeqTest::_internal_long_mem() const {
  return long_mem_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
LongSeqTest::long_mem() const {
  // @@protoc_insertion_point(field_list:myprotobuf.LongSeqTest.long_mem)
  return _internal_long_mem();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LongSeqTest::_internal_mutable_long_mem() {
  return &long_mem_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
LongSeqTest::mutable_long_mem() {
  // @@protoc_insertion_point(field_mutable_list:myprotobuf.LongSeqTest.long_mem)
  return _internal_mutable_long_mem();
}

// -------------------------------------------------------------------

// DoubleSeqTest

// repeated double double_mem = 1;
inline int DoubleSeqTest::_internal_double_mem_size() const {
  return double_mem_.size();
}
inline int DoubleSeqTest::double_mem_size() const {
  return _internal_double_mem_size();
}
inline void DoubleSeqTest::clear_double_mem() {
  double_mem_.Clear();
}
inline double DoubleSeqTest::_internal_double_mem(int index) const {
  return double_mem_.Get(index);
}
inline double DoubleSeqTest::double_mem(int index) const {
  // @@protoc_insertion_point(field_get:myprotobuf.DoubleSeqTest.double_mem)
  return _internal_double_mem(index);
}
inline void DoubleSeqTest::set_double_mem(int index, double value) {
  double_mem_.Set(index, value);
  // @@protoc_insertion_point(field_set:myprotobuf.DoubleSeqTest.double_mem)
}
inline void DoubleSeqTest::_internal_add_double_mem(double value) {
  double_mem_.Add(value);
}
inline void DoubleSeqTest::add_double_mem(double value) {
  _internal_add_double_mem(value);
  // @@protoc_insertion_point(field_add:myprotobuf.DoubleSeqTest.double_mem)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleSeqTest::_internal_double_mem() const {
  return double_mem_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DoubleSeqTest::double_mem() const {
  // @@protoc_insertion_point(field_list:myprotobuf.DoubleSeqTest.double_mem)
  return _internal_double_mem();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleSeqTest::_internal_mutable_double_mem() {
  return &double_mem_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DoubleSeqTest::mutable_double_mem() {
  // @@protoc_insertion_point(field_mutable_list:myprotobuf.DoubleSeqTest.double_mem)
  return _internal_mutable_double_mem();
}

// -------------------------------------------------------------------

// StringTest

// repeated bytes char_mem = 1;
inline int StringTest::_internal_char_mem_size() const {
  return char_mem_.size();
}
inline int StringTest::char_mem_size() const {
  return _internal_char_mem_size();
}
inline void StringTest::clear_char_mem() {
  char_mem_.Clear();
}
inline std::string* StringTest::add_char_mem() {
  // @@protoc_insertion_point(field_add_mutable:myprotobuf.StringTest.char_mem)
  return _internal_add_char_mem();
}
inline const std::string& StringTest::_internal_char_mem(int index) const {
  return char_mem_.Get(index);
}
inline const std::string& StringTest::char_mem(int index) const {
  // @@protoc_insertion_point(field_get:myprotobuf.StringTest.char_mem)
  return _internal_char_mem(index);
}
inline std::string* StringTest::mutable_char_mem(int index) {
  // @@protoc_insertion_point(field_mutable:myprotobuf.StringTest.char_mem)
  return char_mem_.Mutable(index);
}
inline void StringTest::set_char_mem(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:myprotobuf.StringTest.char_mem)
  char_mem_.Mutable(index)->assign(value);
}
inline void StringTest::set_char_mem(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:myprotobuf.StringTest.char_mem)
  char_mem_.Mutable(index)->assign(std::move(value));
}
inline void StringTest::set_char_mem(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  char_mem_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:myprotobuf.StringTest.char_mem)
}
inline void StringTest::set_char_mem(int index, const void* value, size_t size) {
  char_mem_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:myprotobuf.StringTest.char_mem)
}
inline std::string* StringTest::_internal_add_char_mem() {
  return char_mem_.Add();
}
inline void StringTest::add_char_mem(const std::string& value) {
  char_mem_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:myprotobuf.StringTest.char_mem)
}
inline void StringTest::add_char_mem(std::string&& value) {
  char_mem_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:myprotobuf.StringTest.char_mem)
}
inline void StringTest::add_char_mem(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  char_mem_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:myprotobuf.StringTest.char_mem)
}
inline void StringTest::add_char_mem(const void* value, size_t size) {
  char_mem_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:myprotobuf.StringTest.char_mem)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringTest::char_mem() const {
  // @@protoc_insertion_point(field_list:myprotobuf.StringTest.char_mem)
  return char_mem_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringTest::mutable_char_mem() {
  // @@protoc_insertion_point(field_mutable_list:myprotobuf.StringTest.char_mem)
  return &char_mem_;
}

// -------------------------------------------------------------------

// StringSeqTest

// repeated .myprotobuf.StringTest string_mem = 1;
inline int StringSeqTest::_internal_string_mem_size() const {
  return string_mem_.size();
}
inline int StringSeqTest::string_mem_size() const {
  return _internal_string_mem_size();
}
inline void StringSeqTest::clear_string_mem() {
  string_mem_.Clear();
}
inline ::myprotobuf::StringTest* StringSeqTest::mutable_string_mem(int index) {
  // @@protoc_insertion_point(field_mutable:myprotobuf.StringSeqTest.string_mem)
  return string_mem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::StringTest >*
StringSeqTest::mutable_string_mem() {
  // @@protoc_insertion_point(field_mutable_list:myprotobuf.StringSeqTest.string_mem)
  return &string_mem_;
}
inline const ::myprotobuf::StringTest& StringSeqTest::_internal_string_mem(int index) const {
  return string_mem_.Get(index);
}
inline const ::myprotobuf::StringTest& StringSeqTest::string_mem(int index) const {
  // @@protoc_insertion_point(field_get:myprotobuf.StringSeqTest.string_mem)
  return _internal_string_mem(index);
}
inline ::myprotobuf::StringTest* StringSeqTest::_internal_add_string_mem() {
  return string_mem_.Add();
}
inline ::myprotobuf::StringTest* StringSeqTest::add_string_mem() {
  // @@protoc_insertion_point(field_add:myprotobuf.StringSeqTest.string_mem)
  return _internal_add_string_mem();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::StringTest >&
StringSeqTest::string_mem() const {
  // @@protoc_insertion_point(field_list:myprotobuf.StringSeqTest.string_mem)
  return string_mem_;
}

// -------------------------------------------------------------------

// ArrayLongSeqTest

// repeated .myprotobuf.LongSeqTest long_seq_mem = 1;
inline int ArrayLongSeqTest::_internal_long_seq_mem_size() const {
  return long_seq_mem_.size();
}
inline int ArrayLongSeqTest::long_seq_mem_size() const {
  return _internal_long_seq_mem_size();
}
inline void ArrayLongSeqTest::clear_long_seq_mem() {
  long_seq_mem_.Clear();
}
inline ::myprotobuf::LongSeqTest* ArrayLongSeqTest::mutable_long_seq_mem(int index) {
  // @@protoc_insertion_point(field_mutable:myprotobuf.ArrayLongSeqTest.long_seq_mem)
  return long_seq_mem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::LongSeqTest >*
ArrayLongSeqTest::mutable_long_seq_mem() {
  // @@protoc_insertion_point(field_mutable_list:myprotobuf.ArrayLongSeqTest.long_seq_mem)
  return &long_seq_mem_;
}
inline const ::myprotobuf::LongSeqTest& ArrayLongSeqTest::_internal_long_seq_mem(int index) const {
  return long_seq_mem_.Get(index);
}
inline const ::myprotobuf::LongSeqTest& ArrayLongSeqTest::long_seq_mem(int index) const {
  // @@protoc_insertion_point(field_get:myprotobuf.ArrayLongSeqTest.long_seq_mem)
  return _internal_long_seq_mem(index);
}
inline ::myprotobuf::LongSeqTest* ArrayLongSeqTest::_internal_add_long_seq_mem() {
  return long_seq_mem_.Add();
}
inline ::myprotobuf::LongSeqTest* ArrayLongSeqTest::add_long_seq_mem() {
  // @@protoc_insertion_point(field_add:myprotobuf.ArrayLongSeqTest.long_seq_mem)
  return _internal_add_long_seq_mem();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::LongSeqTest >&
ArrayLongSeqTest::long_seq_mem() const {
  // @@protoc_insertion_point(field_list:myprotobuf.ArrayLongSeqTest.long_seq_mem)
  return long_seq_mem_;
}

// -------------------------------------------------------------------

// SeqArrayLongSeqTest

// repeated .myprotobuf.ArrayLongSeqTest array_long_seq_mem = 1;
inline int SeqArrayLongSeqTest::_internal_array_long_seq_mem_size() const {
  return array_long_seq_mem_.size();
}
inline int SeqArrayLongSeqTest::array_long_seq_mem_size() const {
  return _internal_array_long_seq_mem_size();
}
inline void SeqArrayLongSeqTest::clear_array_long_seq_mem() {
  array_long_seq_mem_.Clear();
}
inline ::myprotobuf::ArrayLongSeqTest* SeqArrayLongSeqTest::mutable_array_long_seq_mem(int index) {
  // @@protoc_insertion_point(field_mutable:myprotobuf.SeqArrayLongSeqTest.array_long_seq_mem)
  return array_long_seq_mem_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::ArrayLongSeqTest >*
SeqArrayLongSeqTest::mutable_array_long_seq_mem() {
  // @@protoc_insertion_point(field_mutable_list:myprotobuf.SeqArrayLongSeqTest.array_long_seq_mem)
  return &array_long_seq_mem_;
}
inline const ::myprotobuf::ArrayLongSeqTest& SeqArrayLongSeqTest::_internal_array_long_seq_mem(int index) const {
  return array_long_seq_mem_.Get(index);
}
inline const ::myprotobuf::ArrayLongSeqTest& SeqArrayLongSeqTest::array_long_seq_mem(int index) const {
  // @@protoc_insertion_point(field_get:myprotobuf.SeqArrayLongSeqTest.array_long_seq_mem)
  return _internal_array_long_seq_mem(index);
}
inline ::myprotobuf::ArrayLongSeqTest* SeqArrayLongSeqTest::_internal_add_array_long_seq_mem() {
  return array_long_seq_mem_.Add();
}
inline ::myprotobuf::ArrayLongSeqTest* SeqArrayLongSeqTest::add_array_long_seq_mem() {
  // @@protoc_insertion_point(field_add:myprotobuf.SeqArrayLongSeqTest.array_long_seq_mem)
  return _internal_add_array_long_seq_mem();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::ArrayLongSeqTest >&
SeqArrayLongSeqTest::array_long_seq_mem() const {
  // @@protoc_insertion_point(field_list:myprotobuf.SeqArrayLongSeqTest.array_long_seq_mem)
  return array_long_seq_mem_;
}

// -------------------------------------------------------------------

// TestCustomType

// sfixed32 test_long = 1;
inline void TestCustomType::clear_test_long() {
  test_long_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestCustomType::_internal_test_long() const {
  return test_long_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestCustomType::test_long() const {
  // @@protoc_insertion_point(field_get:myprotobuf.TestCustomType.test_long)
  return _internal_test_long();
}
inline void TestCustomType::_internal_set_test_long(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  test_long_ = value;
}
inline void TestCustomType::set_test_long(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_test_long(value);
  // @@protoc_insertion_point(field_set:myprotobuf.TestCustomType.test_long)
}

// repeated .myprotobuf.Octet test_octet = 2;
inline int TestCustomType::_internal_test_octet_size() const {
  return test_octet_.size();
}
inline int TestCustomType::test_octet_size() const {
  return _internal_test_octet_size();
}
inline void TestCustomType::clear_test_octet() {
  test_octet_.Clear();
}
inline ::myprotobuf::Octet* TestCustomType::mutable_test_octet(int index) {
  // @@protoc_insertion_point(field_mutable:myprotobuf.TestCustomType.test_octet)
  return test_octet_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::Octet >*
TestCustomType::mutable_test_octet() {
  // @@protoc_insertion_point(field_mutable_list:myprotobuf.TestCustomType.test_octet)
  return &test_octet_;
}
inline const ::myprotobuf::Octet& TestCustomType::_internal_test_octet(int index) const {
  return test_octet_.Get(index);
}
inline const ::myprotobuf::Octet& TestCustomType::test_octet(int index) const {
  // @@protoc_insertion_point(field_get:myprotobuf.TestCustomType.test_octet)
  return _internal_test_octet(index);
}
inline ::myprotobuf::Octet* TestCustomType::_internal_add_test_octet() {
  return test_octet_.Add();
}
inline ::myprotobuf::Octet* TestCustomType::add_test_octet() {
  // @@protoc_insertion_point(field_add:myprotobuf.TestCustomType.test_octet)
  return _internal_add_test_octet();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myprotobuf::Octet >&
TestCustomType::test_octet() const {
  // @@protoc_insertion_point(field_list:myprotobuf.TestCustomType.test_octet)
  return test_octet_;
}

// .myprotobuf.LongSeqTest test_long_seq = 3;
inline bool TestCustomType::_internal_has_test_long_seq() const {
  return this != internal_default_instance() && test_long_seq_ != nullptr;
}
inline bool TestCustomType::has_test_long_seq() const {
  return _internal_has_test_long_seq();
}
inline void TestCustomType::clear_test_long_seq() {
  if (GetArenaNoVirtual() == nullptr && test_long_seq_ != nullptr) {
    delete test_long_seq_;
  }
  test_long_seq_ = nullptr;
}
inline const ::myprotobuf::LongSeqTest& TestCustomType::_internal_test_long_seq() const {
  const ::myprotobuf::LongSeqTest* p = test_long_seq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::myprotobuf::LongSeqTest*>(
      &::myprotobuf::_LongSeqTest_default_instance_);
}
inline const ::myprotobuf::LongSeqTest& TestCustomType::test_long_seq() const {
  // @@protoc_insertion_point(field_get:myprotobuf.TestCustomType.test_long_seq)
  return _internal_test_long_seq();
}
inline ::myprotobuf::LongSeqTest* TestCustomType::release_test_long_seq() {
  // @@protoc_insertion_point(field_release:myprotobuf.TestCustomType.test_long_seq)
  
  ::myprotobuf::LongSeqTest* temp = test_long_seq_;
  test_long_seq_ = nullptr;
  return temp;
}
inline ::myprotobuf::LongSeqTest* TestCustomType::_internal_mutable_test_long_seq() {
  
  if (test_long_seq_ == nullptr) {
    auto* p = CreateMaybeMessage<::myprotobuf::LongSeqTest>(GetArenaNoVirtual());
    test_long_seq_ = p;
  }
  return test_long_seq_;
}
inline ::myprotobuf::LongSeqTest* TestCustomType::mutable_test_long_seq() {
  // @@protoc_insertion_point(field_mutable:myprotobuf.TestCustomType.test_long_seq)
  return _internal_mutable_test_long_seq();
}
inline void TestCustomType::set_allocated_test_long_seq(::myprotobuf::LongSeqTest* test_long_seq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete test_long_seq_;
  }
  if (test_long_seq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      test_long_seq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_long_seq, submessage_arena);
    }
    
  } else {
    
  }
  test_long_seq_ = test_long_seq;
  // @@protoc_insertion_point(field_set_allocated:myprotobuf.TestCustomType.test_long_seq)
}

// .myprotobuf.StringTest test_string = 4;
inline bool TestCustomType::_internal_has_test_string() const {
  return this != internal_default_instance() && test_string_ != nullptr;
}
inline bool TestCustomType::has_test_string() const {
  return _internal_has_test_string();
}
inline void TestCustomType::clear_test_string() {
  if (GetArenaNoVirtual() == nullptr && test_string_ != nullptr) {
    delete test_string_;
  }
  test_string_ = nullptr;
}
inline const ::myprotobuf::StringTest& TestCustomType::_internal_test_string() const {
  const ::myprotobuf::StringTest* p = test_string_;
  return p != nullptr ? *p : *reinterpret_cast<const ::myprotobuf::StringTest*>(
      &::myprotobuf::_StringTest_default_instance_);
}
inline const ::myprotobuf::StringTest& TestCustomType::test_string() const {
  // @@protoc_insertion_point(field_get:myprotobuf.TestCustomType.test_string)
  return _internal_test_string();
}
inline ::myprotobuf::StringTest* TestCustomType::release_test_string() {
  // @@protoc_insertion_point(field_release:myprotobuf.TestCustomType.test_string)
  
  ::myprotobuf::StringTest* temp = test_string_;
  test_string_ = nullptr;
  return temp;
}
inline ::myprotobuf::StringTest* TestCustomType::_internal_mutable_test_string() {
  
  if (test_string_ == nullptr) {
    auto* p = CreateMaybeMessage<::myprotobuf::StringTest>(GetArenaNoVirtual());
    test_string_ = p;
  }
  return test_string_;
}
inline ::myprotobuf::StringTest* TestCustomType::mutable_test_string() {
  // @@protoc_insertion_point(field_mutable:myprotobuf.TestCustomType.test_string)
  return _internal_mutable_test_string();
}
inline void TestCustomType::set_allocated_test_string(::myprotobuf::StringTest* test_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete test_string_;
  }
  if (test_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      test_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_string, submessage_arena);
    }
    
  } else {
    
  }
  test_string_ = test_string;
  // @@protoc_insertion_point(field_set_allocated:myprotobuf.TestCustomType.test_string)
}

// .myprotobuf.StringSeqTest test_string_seq = 5;
inline bool TestCustomType::_internal_has_test_string_seq() const {
  return this != internal_default_instance() && test_string_seq_ != nullptr;
}
inline bool TestCustomType::has_test_string_seq() const {
  return _internal_has_test_string_seq();
}
inline void TestCustomType::clear_test_string_seq() {
  if (GetArenaNoVirtual() == nullptr && test_string_seq_ != nullptr) {
    delete test_string_seq_;
  }
  test_string_seq_ = nullptr;
}
inline const ::myprotobuf::StringSeqTest& TestCustomType::_internal_test_string_seq() const {
  const ::myprotobuf::StringSeqTest* p = test_string_seq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::myprotobuf::StringSeqTest*>(
      &::myprotobuf::_StringSeqTest_default_instance_);
}
inline const ::myprotobuf::StringSeqTest& TestCustomType::test_string_seq() const {
  // @@protoc_insertion_point(field_get:myprotobuf.TestCustomType.test_string_seq)
  return _internal_test_string_seq();
}
inline ::myprotobuf::StringSeqTest* TestCustomType::release_test_string_seq() {
  // @@protoc_insertion_point(field_release:myprotobuf.TestCustomType.test_string_seq)
  
  ::myprotobuf::StringSeqTest* temp = test_string_seq_;
  test_string_seq_ = nullptr;
  return temp;
}
inline ::myprotobuf::StringSeqTest* TestCustomType::_internal_mutable_test_string_seq() {
  
  if (test_string_seq_ == nullptr) {
    auto* p = CreateMaybeMessage<::myprotobuf::StringSeqTest>(GetArenaNoVirtual());
    test_string_seq_ = p;
  }
  return test_string_seq_;
}
inline ::myprotobuf::StringSeqTest* TestCustomType::mutable_test_string_seq() {
  // @@protoc_insertion_point(field_mutable:myprotobuf.TestCustomType.test_string_seq)
  return _internal_mutable_test_string_seq();
}
inline void TestCustomType::set_allocated_test_string_seq(::myprotobuf::StringSeqTest* test_string_seq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete test_string_seq_;
  }
  if (test_string_seq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      test_string_seq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_string_seq, submessage_arena);
    }
    
  } else {
    
  }
  test_string_seq_ = test_string_seq;
  // @@protoc_insertion_point(field_set_allocated:myprotobuf.TestCustomType.test_string_seq)
}

// .myprotobuf.DoubleSeqTest test_double_seq = 6;
inline bool TestCustomType::_internal_has_test_double_seq() const {
  return this != internal_default_instance() && test_double_seq_ != nullptr;
}
inline bool TestCustomType::has_test_double_seq() const {
  return _internal_has_test_double_seq();
}
inline void TestCustomType::clear_test_double_seq() {
  if (GetArenaNoVirtual() == nullptr && test_double_seq_ != nullptr) {
    delete test_double_seq_;
  }
  test_double_seq_ = nullptr;
}
inline const ::myprotobuf::DoubleSeqTest& TestCustomType::_internal_test_double_seq() const {
  const ::myprotobuf::DoubleSeqTest* p = test_double_seq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::myprotobuf::DoubleSeqTest*>(
      &::myprotobuf::_DoubleSeqTest_default_instance_);
}
inline const ::myprotobuf::DoubleSeqTest& TestCustomType::test_double_seq() const {
  // @@protoc_insertion_point(field_get:myprotobuf.TestCustomType.test_double_seq)
  return _internal_test_double_seq();
}
inline ::myprotobuf::DoubleSeqTest* TestCustomType::release_test_double_seq() {
  // @@protoc_insertion_point(field_release:myprotobuf.TestCustomType.test_double_seq)
  
  ::myprotobuf::DoubleSeqTest* temp = test_double_seq_;
  test_double_seq_ = nullptr;
  return temp;
}
inline ::myprotobuf::DoubleSeqTest* TestCustomType::_internal_mutable_test_double_seq() {
  
  if (test_double_seq_ == nullptr) {
    auto* p = CreateMaybeMessage<::myprotobuf::DoubleSeqTest>(GetArenaNoVirtual());
    test_double_seq_ = p;
  }
  return test_double_seq_;
}
inline ::myprotobuf::DoubleSeqTest* TestCustomType::mutable_test_double_seq() {
  // @@protoc_insertion_point(field_mutable:myprotobuf.TestCustomType.test_double_seq)
  return _internal_mutable_test_double_seq();
}
inline void TestCustomType::set_allocated_test_double_seq(::myprotobuf::DoubleSeqTest* test_double_seq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete test_double_seq_;
  }
  if (test_double_seq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      test_double_seq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_double_seq, submessage_arena);
    }
    
  } else {
    
  }
  test_double_seq_ = test_double_seq;
  // @@protoc_insertion_point(field_set_allocated:myprotobuf.TestCustomType.test_double_seq)
}

// .myprotobuf.ArrayLongSeqTest test_array_long_seq = 7;
inline bool TestCustomType::_internal_has_test_array_long_seq() const {
  return this != internal_default_instance() && test_array_long_seq_ != nullptr;
}
inline bool TestCustomType::has_test_array_long_seq() const {
  return _internal_has_test_array_long_seq();
}
inline void TestCustomType::clear_test_array_long_seq() {
  if (GetArenaNoVirtual() == nullptr && test_array_long_seq_ != nullptr) {
    delete test_array_long_seq_;
  }
  test_array_long_seq_ = nullptr;
}
inline const ::myprotobuf::ArrayLongSeqTest& TestCustomType::_internal_test_array_long_seq() const {
  const ::myprotobuf::ArrayLongSeqTest* p = test_array_long_seq_;
  return p != nullptr ? *p : *reinterpret_cast<const ::myprotobuf::ArrayLongSeqTest*>(
      &::myprotobuf::_ArrayLongSeqTest_default_instance_);
}
inline const ::myprotobuf::ArrayLongSeqTest& TestCustomType::test_array_long_seq() const {
  // @@protoc_insertion_point(field_get:myprotobuf.TestCustomType.test_array_long_seq)
  return _internal_test_array_long_seq();
}
inline ::myprotobuf::ArrayLongSeqTest* TestCustomType::release_test_array_long_seq() {
  // @@protoc_insertion_point(field_release:myprotobuf.TestCustomType.test_array_long_seq)
  
  ::myprotobuf::ArrayLongSeqTest* temp = test_array_long_seq_;
  test_array_long_seq_ = nullptr;
  return temp;
}
inline ::myprotobuf::ArrayLongSeqTest* TestCustomType::_internal_mutable_test_array_long_seq() {
  
  if (test_array_long_seq_ == nullptr) {
    auto* p = CreateMaybeMessage<::myprotobuf::ArrayLongSeqTest>(GetArenaNoVirtual());
    test_array_long_seq_ = p;
  }
  return test_array_long_seq_;
}
inline ::myprotobuf::ArrayLongSeqTest* TestCustomType::mutable_test_array_long_seq() {
  // @@protoc_insertion_point(field_mutable:myprotobuf.TestCustomType.test_array_long_seq)
  return _internal_mutable_test_array_long_seq();
}
inline void TestCustomType::set_allocated_test_array_long_seq(::myprotobuf::ArrayLongSeqTest* test_array_long_seq) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete test_array_long_seq_;
  }
  if (test_array_long_seq) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      test_array_long_seq = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test_array_long_seq, submessage_arena);
    }
    
  } else {
    
  }
  test_array_long_seq_ = test_array_long_seq;
  // @@protoc_insertion_point(field_set_allocated:myprotobuf.TestCustomType.test_array_long_seq)
}

// .myprotobuf.SeqArrayLongSeqTest seq_array_long_seq_test = 8;
inline bool TestCustomType::_internal_has_seq_array_long_seq_test() const {
  return this != internal_default_instance() && seq_array_long_seq_test_ != nullptr;
}
inline bool TestCustomType::has_seq_array_long_seq_test() const {
  return _internal_has_seq_array_long_seq_test();
}
inline void TestCustomType::clear_seq_array_long_seq_test() {
  if (GetArenaNoVirtual() == nullptr && seq_array_long_seq_test_ != nullptr) {
    delete seq_array_long_seq_test_;
  }
  seq_array_long_seq_test_ = nullptr;
}
inline const ::myprotobuf::SeqArrayLongSeqTest& TestCustomType::_internal_seq_array_long_seq_test() const {
  const ::myprotobuf::SeqArrayLongSeqTest* p = seq_array_long_seq_test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::myprotobuf::SeqArrayLongSeqTest*>(
      &::myprotobuf::_SeqArrayLongSeqTest_default_instance_);
}
inline const ::myprotobuf::SeqArrayLongSeqTest& TestCustomType::seq_array_long_seq_test() const {
  // @@protoc_insertion_point(field_get:myprotobuf.TestCustomType.seq_array_long_seq_test)
  return _internal_seq_array_long_seq_test();
}
inline ::myprotobuf::SeqArrayLongSeqTest* TestCustomType::release_seq_array_long_seq_test() {
  // @@protoc_insertion_point(field_release:myprotobuf.TestCustomType.seq_array_long_seq_test)
  
  ::myprotobuf::SeqArrayLongSeqTest* temp = seq_array_long_seq_test_;
  seq_array_long_seq_test_ = nullptr;
  return temp;
}
inline ::myprotobuf::SeqArrayLongSeqTest* TestCustomType::_internal_mutable_seq_array_long_seq_test() {
  
  if (seq_array_long_seq_test_ == nullptr) {
    auto* p = CreateMaybeMessage<::myprotobuf::SeqArrayLongSeqTest>(GetArenaNoVirtual());
    seq_array_long_seq_test_ = p;
  }
  return seq_array_long_seq_test_;
}
inline ::myprotobuf::SeqArrayLongSeqTest* TestCustomType::mutable_seq_array_long_seq_test() {
  // @@protoc_insertion_point(field_mutable:myprotobuf.TestCustomType.seq_array_long_seq_test)
  return _internal_mutable_seq_array_long_seq_test();
}
inline void TestCustomType::set_allocated_seq_array_long_seq_test(::myprotobuf::SeqArrayLongSeqTest* seq_array_long_seq_test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete seq_array_long_seq_test_;
  }
  if (seq_array_long_seq_test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      seq_array_long_seq_test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seq_array_long_seq_test, submessage_arena);
    }
    
  } else {
    
  }
  seq_array_long_seq_test_ = seq_array_long_seq_test;
  // @@protoc_insertion_point(field_set_allocated:myprotobuf.TestCustomType.seq_array_long_seq_test)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace myprotobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ProtobufCustomType_2eproto
