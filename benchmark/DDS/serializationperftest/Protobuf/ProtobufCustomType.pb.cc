// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtobufCustomType.proto

#include "ProtobufCustomType.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ProtobufCustomType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArrayLongSeqTest_ProtobufCustomType_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobufCustomType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleSeqTest_ProtobufCustomType_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobufCustomType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongSeqTest_ProtobufCustomType_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobufCustomType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Octet_ProtobufCustomType_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobufCustomType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeqArrayLongSeqTest_ProtobufCustomType_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobufCustomType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringSeqTest_ProtobufCustomType_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ProtobufCustomType_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringTest_ProtobufCustomType_2eproto;
namespace myprotobuf {
class OctetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Octet> _instance;
} _Octet_default_instance_;
class LongSeqTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LongSeqTest> _instance;
} _LongSeqTest_default_instance_;
class DoubleSeqTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DoubleSeqTest> _instance;
} _DoubleSeqTest_default_instance_;
class StringTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringTest> _instance;
} _StringTest_default_instance_;
class StringSeqTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StringSeqTest> _instance;
} _StringSeqTest_default_instance_;
class ArrayLongSeqTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ArrayLongSeqTest> _instance;
} _ArrayLongSeqTest_default_instance_;
class SeqArrayLongSeqTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeqArrayLongSeqTest> _instance;
} _SeqArrayLongSeqTest_default_instance_;
class TestCustomTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestCustomType> _instance;
} _TestCustomType_default_instance_;
}  // namespace myprotobuf
static void InitDefaultsscc_info_ArrayLongSeqTest_ProtobufCustomType_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myprotobuf::_ArrayLongSeqTest_default_instance_;
    new (ptr) ::myprotobuf::ArrayLongSeqTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myprotobuf::ArrayLongSeqTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ArrayLongSeqTest_ProtobufCustomType_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ArrayLongSeqTest_ProtobufCustomType_2eproto}, {
      &scc_info_LongSeqTest_ProtobufCustomType_2eproto.base,}};

static void InitDefaultsscc_info_DoubleSeqTest_ProtobufCustomType_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myprotobuf::_DoubleSeqTest_default_instance_;
    new (ptr) ::myprotobuf::DoubleSeqTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myprotobuf::DoubleSeqTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleSeqTest_ProtobufCustomType_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DoubleSeqTest_ProtobufCustomType_2eproto}, {}};

static void InitDefaultsscc_info_LongSeqTest_ProtobufCustomType_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myprotobuf::_LongSeqTest_default_instance_;
    new (ptr) ::myprotobuf::LongSeqTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myprotobuf::LongSeqTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LongSeqTest_ProtobufCustomType_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LongSeqTest_ProtobufCustomType_2eproto}, {}};

static void InitDefaultsscc_info_Octet_ProtobufCustomType_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myprotobuf::_Octet_default_instance_;
    new (ptr) ::myprotobuf::Octet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myprotobuf::Octet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Octet_ProtobufCustomType_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Octet_ProtobufCustomType_2eproto}, {}};

static void InitDefaultsscc_info_SeqArrayLongSeqTest_ProtobufCustomType_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myprotobuf::_SeqArrayLongSeqTest_default_instance_;
    new (ptr) ::myprotobuf::SeqArrayLongSeqTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myprotobuf::SeqArrayLongSeqTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeqArrayLongSeqTest_ProtobufCustomType_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SeqArrayLongSeqTest_ProtobufCustomType_2eproto}, {
      &scc_info_ArrayLongSeqTest_ProtobufCustomType_2eproto.base,}};

static void InitDefaultsscc_info_StringSeqTest_ProtobufCustomType_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myprotobuf::_StringSeqTest_default_instance_;
    new (ptr) ::myprotobuf::StringSeqTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myprotobuf::StringSeqTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StringSeqTest_ProtobufCustomType_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StringSeqTest_ProtobufCustomType_2eproto}, {
      &scc_info_StringTest_ProtobufCustomType_2eproto.base,}};

static void InitDefaultsscc_info_StringTest_ProtobufCustomType_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myprotobuf::_StringTest_default_instance_;
    new (ptr) ::myprotobuf::StringTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myprotobuf::StringTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringTest_ProtobufCustomType_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StringTest_ProtobufCustomType_2eproto}, {}};

static void InitDefaultsscc_info_TestCustomType_ProtobufCustomType_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myprotobuf::_TestCustomType_default_instance_;
    new (ptr) ::myprotobuf::TestCustomType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::myprotobuf::TestCustomType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_TestCustomType_ProtobufCustomType_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_TestCustomType_ProtobufCustomType_2eproto}, {
      &scc_info_Octet_ProtobufCustomType_2eproto.base,
      &scc_info_LongSeqTest_ProtobufCustomType_2eproto.base,
      &scc_info_StringTest_ProtobufCustomType_2eproto.base,
      &scc_info_StringSeqTest_ProtobufCustomType_2eproto.base,
      &scc_info_DoubleSeqTest_ProtobufCustomType_2eproto.base,
      &scc_info_ArrayLongSeqTest_ProtobufCustomType_2eproto.base,
      &scc_info_SeqArrayLongSeqTest_ProtobufCustomType_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ProtobufCustomType_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ProtobufCustomType_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ProtobufCustomType_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ProtobufCustomType_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::Octet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::Octet, octet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::LongSeqTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::LongSeqTest, long_mem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::DoubleSeqTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::DoubleSeqTest, double_mem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::StringTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::StringTest, char_mem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::StringSeqTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::StringSeqTest, string_mem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::ArrayLongSeqTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::ArrayLongSeqTest, long_seq_mem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::SeqArrayLongSeqTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::SeqArrayLongSeqTest, array_long_seq_mem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::TestCustomType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myprotobuf::TestCustomType, test_long_),
  PROTOBUF_FIELD_OFFSET(::myprotobuf::TestCustomType, test_octet_),
  PROTOBUF_FIELD_OFFSET(::myprotobuf::TestCustomType, test_long_seq_),
  PROTOBUF_FIELD_OFFSET(::myprotobuf::TestCustomType, test_string_),
  PROTOBUF_FIELD_OFFSET(::myprotobuf::TestCustomType, test_string_seq_),
  PROTOBUF_FIELD_OFFSET(::myprotobuf::TestCustomType, test_double_seq_),
  PROTOBUF_FIELD_OFFSET(::myprotobuf::TestCustomType, test_array_long_seq_),
  PROTOBUF_FIELD_OFFSET(::myprotobuf::TestCustomType, seq_array_long_seq_test_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::myprotobuf::Octet)},
  { 6, -1, sizeof(::myprotobuf::LongSeqTest)},
  { 12, -1, sizeof(::myprotobuf::DoubleSeqTest)},
  { 18, -1, sizeof(::myprotobuf::StringTest)},
  { 24, -1, sizeof(::myprotobuf::StringSeqTest)},
  { 30, -1, sizeof(::myprotobuf::ArrayLongSeqTest)},
  { 36, -1, sizeof(::myprotobuf::SeqArrayLongSeqTest)},
  { 42, -1, sizeof(::myprotobuf::TestCustomType)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myprotobuf::_Octet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myprotobuf::_LongSeqTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myprotobuf::_DoubleSeqTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myprotobuf::_StringTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myprotobuf::_StringSeqTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myprotobuf::_ArrayLongSeqTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myprotobuf::_SeqArrayLongSeqTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myprotobuf::_TestCustomType_default_instance_),
};

const char descriptor_table_protodef_ProtobufCustomType_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030ProtobufCustomType.proto\022\nmyprotobuf\"\026"
  "\n\005Octet\022\r\n\005octet\030\001 \001(\014\"\037\n\013LongSeqTest\022\020\n"
  "\010long_mem\030\001 \003(\017\"#\n\rDoubleSeqTest\022\022\n\ndoub"
  "le_mem\030\001 \003(\001\"\036\n\nStringTest\022\020\n\010char_mem\030\001"
  " \003(\014\";\n\rStringSeqTest\022*\n\nstring_mem\030\001 \003("
  "\0132\026.myprotobuf.StringTest\"A\n\020ArrayLongSe"
  "qTest\022-\n\014long_seq_mem\030\001 \003(\0132\027.myprotobuf"
  ".LongSeqTest\"O\n\023SeqArrayLongSeqTest\0228\n\022a"
  "rray_long_seq_mem\030\001 \003(\0132\034.myprotobuf.Arr"
  "ayLongSeqTest\"\214\003\n\016TestCustomType\022\021\n\ttest"
  "_long\030\001 \001(\017\022%\n\ntest_octet\030\002 \003(\0132\021.myprot"
  "obuf.Octet\022.\n\rtest_long_seq\030\003 \001(\0132\027.mypr"
  "otobuf.LongSeqTest\022+\n\013test_string\030\004 \001(\0132"
  "\026.myprotobuf.StringTest\0222\n\017test_string_s"
  "eq\030\005 \001(\0132\031.myprotobuf.StringSeqTest\0222\n\017t"
  "est_double_seq\030\006 \001(\0132\031.myprotobuf.Double"
  "SeqTest\0229\n\023test_array_long_seq\030\007 \001(\0132\034.m"
  "yprotobuf.ArrayLongSeqTest\022@\n\027seq_array_"
  "long_seq_test\030\010 \001(\0132\037.myprotobuf.SeqArra"
  "yLongSeqTestb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ProtobufCustomType_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ProtobufCustomType_2eproto_sccs[8] = {
  &scc_info_ArrayLongSeqTest_ProtobufCustomType_2eproto.base,
  &scc_info_DoubleSeqTest_ProtobufCustomType_2eproto.base,
  &scc_info_LongSeqTest_ProtobufCustomType_2eproto.base,
  &scc_info_Octet_ProtobufCustomType_2eproto.base,
  &scc_info_SeqArrayLongSeqTest_ProtobufCustomType_2eproto.base,
  &scc_info_StringSeqTest_ProtobufCustomType_2eproto.base,
  &scc_info_StringTest_ProtobufCustomType_2eproto.base,
  &scc_info_TestCustomType_ProtobufCustomType_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ProtobufCustomType_2eproto_once;
static bool descriptor_table_ProtobufCustomType_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ProtobufCustomType_2eproto = {
  &descriptor_table_ProtobufCustomType_2eproto_initialized, descriptor_table_protodef_ProtobufCustomType_2eproto, "ProtobufCustomType.proto", 780,
  &descriptor_table_ProtobufCustomType_2eproto_once, descriptor_table_ProtobufCustomType_2eproto_sccs, descriptor_table_ProtobufCustomType_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_ProtobufCustomType_2eproto::offsets,
  file_level_metadata_ProtobufCustomType_2eproto, 8, file_level_enum_descriptors_ProtobufCustomType_2eproto, file_level_service_descriptors_ProtobufCustomType_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ProtobufCustomType_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ProtobufCustomType_2eproto), true);
namespace myprotobuf {

// ===================================================================

void Octet::InitAsDefaultInstance() {
}
class Octet::_Internal {
 public:
};

Octet::Octet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:myprotobuf.Octet)
}
Octet::Octet(const Octet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  octet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_octet().empty()) {
    octet_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.octet_);
  }
  // @@protoc_insertion_point(copy_constructor:myprotobuf.Octet)
}

void Octet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Octet_ProtobufCustomType_2eproto.base);
  octet_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Octet::~Octet() {
  // @@protoc_insertion_point(destructor:myprotobuf.Octet)
  SharedDtor();
}

void Octet::SharedDtor() {
  octet_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Octet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Octet& Octet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Octet_ProtobufCustomType_2eproto.base);
  return *internal_default_instance();
}


void Octet::Clear() {
// @@protoc_insertion_point(message_clear_start:myprotobuf.Octet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  octet_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Octet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes octet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_octet(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Octet::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myprotobuf.Octet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes octet = 1;
  if (this->octet().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_octet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myprotobuf.Octet)
  return target;
}

size_t Octet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myprotobuf.Octet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes octet = 1;
  if (this->octet().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_octet());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Octet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myprotobuf.Octet)
  GOOGLE_DCHECK_NE(&from, this);
  const Octet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Octet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myprotobuf.Octet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myprotobuf.Octet)
    MergeFrom(*source);
  }
}

void Octet::MergeFrom(const Octet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myprotobuf.Octet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.octet().size() > 0) {

    octet_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.octet_);
  }
}

void Octet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myprotobuf.Octet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Octet::CopyFrom(const Octet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myprotobuf.Octet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Octet::IsInitialized() const {
  return true;
}

void Octet::InternalSwap(Octet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  octet_.Swap(&other->octet_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Octet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LongSeqTest::InitAsDefaultInstance() {
}
class LongSeqTest::_Internal {
 public:
};

LongSeqTest::LongSeqTest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:myprotobuf.LongSeqTest)
}
LongSeqTest::LongSeqTest(const LongSeqTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      long_mem_(from.long_mem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:myprotobuf.LongSeqTest)
}

void LongSeqTest::SharedCtor() {
}

LongSeqTest::~LongSeqTest() {
  // @@protoc_insertion_point(destructor:myprotobuf.LongSeqTest)
  SharedDtor();
}

void LongSeqTest::SharedDtor() {
}

void LongSeqTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LongSeqTest& LongSeqTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LongSeqTest_ProtobufCustomType_2eproto.base);
  return *internal_default_instance();
}


void LongSeqTest::Clear() {
// @@protoc_insertion_point(message_clear_start:myprotobuf.LongSeqTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  long_mem_.Clear();
  _internal_metadata_.Clear();
}

const char* LongSeqTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated sfixed32 long_mem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_long_mem(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_long_mem(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LongSeqTest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myprotobuf.LongSeqTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated sfixed32 long_mem = 1;
  if (this->_internal_long_mem_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_long_mem(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myprotobuf.LongSeqTest)
  return target;
}

size_t LongSeqTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myprotobuf.LongSeqTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sfixed32 long_mem = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_long_mem_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _long_mem_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LongSeqTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myprotobuf.LongSeqTest)
  GOOGLE_DCHECK_NE(&from, this);
  const LongSeqTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LongSeqTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myprotobuf.LongSeqTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myprotobuf.LongSeqTest)
    MergeFrom(*source);
  }
}

void LongSeqTest::MergeFrom(const LongSeqTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myprotobuf.LongSeqTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  long_mem_.MergeFrom(from.long_mem_);
}

void LongSeqTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myprotobuf.LongSeqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LongSeqTest::CopyFrom(const LongSeqTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myprotobuf.LongSeqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongSeqTest::IsInitialized() const {
  return true;
}

void LongSeqTest::InternalSwap(LongSeqTest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  long_mem_.InternalSwap(&other->long_mem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LongSeqTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DoubleSeqTest::InitAsDefaultInstance() {
}
class DoubleSeqTest::_Internal {
 public:
};

DoubleSeqTest::DoubleSeqTest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:myprotobuf.DoubleSeqTest)
}
DoubleSeqTest::DoubleSeqTest(const DoubleSeqTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      double_mem_(from.double_mem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:myprotobuf.DoubleSeqTest)
}

void DoubleSeqTest::SharedCtor() {
}

DoubleSeqTest::~DoubleSeqTest() {
  // @@protoc_insertion_point(destructor:myprotobuf.DoubleSeqTest)
  SharedDtor();
}

void DoubleSeqTest::SharedDtor() {
}

void DoubleSeqTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DoubleSeqTest& DoubleSeqTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DoubleSeqTest_ProtobufCustomType_2eproto.base);
  return *internal_default_instance();
}


void DoubleSeqTest::Clear() {
// @@protoc_insertion_point(message_clear_start:myprotobuf.DoubleSeqTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  double_mem_.Clear();
  _internal_metadata_.Clear();
}

const char* DoubleSeqTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double double_mem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_mem(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_double_mem(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DoubleSeqTest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myprotobuf.DoubleSeqTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double double_mem = 1;
  if (this->_internal_double_mem_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_double_mem(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myprotobuf.DoubleSeqTest)
  return target;
}

size_t DoubleSeqTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myprotobuf.DoubleSeqTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double double_mem = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_mem_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _double_mem_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DoubleSeqTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myprotobuf.DoubleSeqTest)
  GOOGLE_DCHECK_NE(&from, this);
  const DoubleSeqTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DoubleSeqTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myprotobuf.DoubleSeqTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myprotobuf.DoubleSeqTest)
    MergeFrom(*source);
  }
}

void DoubleSeqTest::MergeFrom(const DoubleSeqTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myprotobuf.DoubleSeqTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  double_mem_.MergeFrom(from.double_mem_);
}

void DoubleSeqTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myprotobuf.DoubleSeqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoubleSeqTest::CopyFrom(const DoubleSeqTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myprotobuf.DoubleSeqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoubleSeqTest::IsInitialized() const {
  return true;
}

void DoubleSeqTest::InternalSwap(DoubleSeqTest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  double_mem_.InternalSwap(&other->double_mem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoubleSeqTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StringTest::InitAsDefaultInstance() {
}
class StringTest::_Internal {
 public:
};

StringTest::StringTest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:myprotobuf.StringTest)
}
StringTest::StringTest(const StringTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      char_mem_(from.char_mem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:myprotobuf.StringTest)
}

void StringTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringTest_ProtobufCustomType_2eproto.base);
}

StringTest::~StringTest() {
  // @@protoc_insertion_point(destructor:myprotobuf.StringTest)
  SharedDtor();
}

void StringTest::SharedDtor() {
}

void StringTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringTest& StringTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringTest_ProtobufCustomType_2eproto.base);
  return *internal_default_instance();
}


void StringTest::Clear() {
// @@protoc_insertion_point(message_clear_start:myprotobuf.StringTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  char_mem_.Clear();
  _internal_metadata_.Clear();
}

const char* StringTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes char_mem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_add_char_mem(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringTest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myprotobuf.StringTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes char_mem = 1;
  for (int i = 0, n = this->_internal_char_mem_size(); i < n; i++) {
    const auto& s = this->_internal_char_mem(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myprotobuf.StringTest)
  return target;
}

size_t StringTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myprotobuf.StringTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes char_mem = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(char_mem_.size());
  for (int i = 0, n = char_mem_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      char_mem_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myprotobuf.StringTest)
  GOOGLE_DCHECK_NE(&from, this);
  const StringTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myprotobuf.StringTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myprotobuf.StringTest)
    MergeFrom(*source);
  }
}

void StringTest::MergeFrom(const StringTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myprotobuf.StringTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  char_mem_.MergeFrom(from.char_mem_);
}

void StringTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myprotobuf.StringTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringTest::CopyFrom(const StringTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myprotobuf.StringTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringTest::IsInitialized() const {
  return true;
}

void StringTest::InternalSwap(StringTest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  char_mem_.InternalSwap(&other->char_mem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StringSeqTest::InitAsDefaultInstance() {
}
class StringSeqTest::_Internal {
 public:
};

StringSeqTest::StringSeqTest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:myprotobuf.StringSeqTest)
}
StringSeqTest::StringSeqTest(const StringSeqTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      string_mem_(from.string_mem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:myprotobuf.StringSeqTest)
}

void StringSeqTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StringSeqTest_ProtobufCustomType_2eproto.base);
}

StringSeqTest::~StringSeqTest() {
  // @@protoc_insertion_point(destructor:myprotobuf.StringSeqTest)
  SharedDtor();
}

void StringSeqTest::SharedDtor() {
}

void StringSeqTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StringSeqTest& StringSeqTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StringSeqTest_ProtobufCustomType_2eproto.base);
  return *internal_default_instance();
}


void StringSeqTest::Clear() {
// @@protoc_insertion_point(message_clear_start:myprotobuf.StringSeqTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_mem_.Clear();
  _internal_metadata_.Clear();
}

const char* StringSeqTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .myprotobuf.StringTest string_mem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_string_mem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StringSeqTest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myprotobuf.StringSeqTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .myprotobuf.StringTest string_mem = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_string_mem_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_string_mem(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myprotobuf.StringSeqTest)
  return target;
}

size_t StringSeqTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myprotobuf.StringSeqTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .myprotobuf.StringTest string_mem = 1;
  total_size += 1UL * this->_internal_string_mem_size();
  for (const auto& msg : this->string_mem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringSeqTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myprotobuf.StringSeqTest)
  GOOGLE_DCHECK_NE(&from, this);
  const StringSeqTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StringSeqTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myprotobuf.StringSeqTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myprotobuf.StringSeqTest)
    MergeFrom(*source);
  }
}

void StringSeqTest::MergeFrom(const StringSeqTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myprotobuf.StringSeqTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  string_mem_.MergeFrom(from.string_mem_);
}

void StringSeqTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myprotobuf.StringSeqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringSeqTest::CopyFrom(const StringSeqTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myprotobuf.StringSeqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringSeqTest::IsInitialized() const {
  return true;
}

void StringSeqTest::InternalSwap(StringSeqTest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  string_mem_.InternalSwap(&other->string_mem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StringSeqTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ArrayLongSeqTest::InitAsDefaultInstance() {
}
class ArrayLongSeqTest::_Internal {
 public:
};

ArrayLongSeqTest::ArrayLongSeqTest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:myprotobuf.ArrayLongSeqTest)
}
ArrayLongSeqTest::ArrayLongSeqTest(const ArrayLongSeqTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      long_seq_mem_(from.long_seq_mem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:myprotobuf.ArrayLongSeqTest)
}

void ArrayLongSeqTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ArrayLongSeqTest_ProtobufCustomType_2eproto.base);
}

ArrayLongSeqTest::~ArrayLongSeqTest() {
  // @@protoc_insertion_point(destructor:myprotobuf.ArrayLongSeqTest)
  SharedDtor();
}

void ArrayLongSeqTest::SharedDtor() {
}

void ArrayLongSeqTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ArrayLongSeqTest& ArrayLongSeqTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ArrayLongSeqTest_ProtobufCustomType_2eproto.base);
  return *internal_default_instance();
}


void ArrayLongSeqTest::Clear() {
// @@protoc_insertion_point(message_clear_start:myprotobuf.ArrayLongSeqTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  long_seq_mem_.Clear();
  _internal_metadata_.Clear();
}

const char* ArrayLongSeqTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .myprotobuf.LongSeqTest long_seq_mem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_long_seq_mem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ArrayLongSeqTest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myprotobuf.ArrayLongSeqTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .myprotobuf.LongSeqTest long_seq_mem = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_long_seq_mem_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_long_seq_mem(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myprotobuf.ArrayLongSeqTest)
  return target;
}

size_t ArrayLongSeqTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myprotobuf.ArrayLongSeqTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .myprotobuf.LongSeqTest long_seq_mem = 1;
  total_size += 1UL * this->_internal_long_seq_mem_size();
  for (const auto& msg : this->long_seq_mem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ArrayLongSeqTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myprotobuf.ArrayLongSeqTest)
  GOOGLE_DCHECK_NE(&from, this);
  const ArrayLongSeqTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ArrayLongSeqTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myprotobuf.ArrayLongSeqTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myprotobuf.ArrayLongSeqTest)
    MergeFrom(*source);
  }
}

void ArrayLongSeqTest::MergeFrom(const ArrayLongSeqTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myprotobuf.ArrayLongSeqTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  long_seq_mem_.MergeFrom(from.long_seq_mem_);
}

void ArrayLongSeqTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myprotobuf.ArrayLongSeqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArrayLongSeqTest::CopyFrom(const ArrayLongSeqTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myprotobuf.ArrayLongSeqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArrayLongSeqTest::IsInitialized() const {
  return true;
}

void ArrayLongSeqTest::InternalSwap(ArrayLongSeqTest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  long_seq_mem_.InternalSwap(&other->long_seq_mem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ArrayLongSeqTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SeqArrayLongSeqTest::InitAsDefaultInstance() {
}
class SeqArrayLongSeqTest::_Internal {
 public:
};

SeqArrayLongSeqTest::SeqArrayLongSeqTest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:myprotobuf.SeqArrayLongSeqTest)
}
SeqArrayLongSeqTest::SeqArrayLongSeqTest(const SeqArrayLongSeqTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      array_long_seq_mem_(from.array_long_seq_mem_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:myprotobuf.SeqArrayLongSeqTest)
}

void SeqArrayLongSeqTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeqArrayLongSeqTest_ProtobufCustomType_2eproto.base);
}

SeqArrayLongSeqTest::~SeqArrayLongSeqTest() {
  // @@protoc_insertion_point(destructor:myprotobuf.SeqArrayLongSeqTest)
  SharedDtor();
}

void SeqArrayLongSeqTest::SharedDtor() {
}

void SeqArrayLongSeqTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeqArrayLongSeqTest& SeqArrayLongSeqTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeqArrayLongSeqTest_ProtobufCustomType_2eproto.base);
  return *internal_default_instance();
}


void SeqArrayLongSeqTest::Clear() {
// @@protoc_insertion_point(message_clear_start:myprotobuf.SeqArrayLongSeqTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_long_seq_mem_.Clear();
  _internal_metadata_.Clear();
}

const char* SeqArrayLongSeqTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .myprotobuf.ArrayLongSeqTest array_long_seq_mem = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_array_long_seq_mem(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeqArrayLongSeqTest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myprotobuf.SeqArrayLongSeqTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .myprotobuf.ArrayLongSeqTest array_long_seq_mem = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_array_long_seq_mem_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_array_long_seq_mem(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myprotobuf.SeqArrayLongSeqTest)
  return target;
}

size_t SeqArrayLongSeqTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myprotobuf.SeqArrayLongSeqTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .myprotobuf.ArrayLongSeqTest array_long_seq_mem = 1;
  total_size += 1UL * this->_internal_array_long_seq_mem_size();
  for (const auto& msg : this->array_long_seq_mem_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeqArrayLongSeqTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myprotobuf.SeqArrayLongSeqTest)
  GOOGLE_DCHECK_NE(&from, this);
  const SeqArrayLongSeqTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeqArrayLongSeqTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myprotobuf.SeqArrayLongSeqTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myprotobuf.SeqArrayLongSeqTest)
    MergeFrom(*source);
  }
}

void SeqArrayLongSeqTest::MergeFrom(const SeqArrayLongSeqTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myprotobuf.SeqArrayLongSeqTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  array_long_seq_mem_.MergeFrom(from.array_long_seq_mem_);
}

void SeqArrayLongSeqTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myprotobuf.SeqArrayLongSeqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeqArrayLongSeqTest::CopyFrom(const SeqArrayLongSeqTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myprotobuf.SeqArrayLongSeqTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeqArrayLongSeqTest::IsInitialized() const {
  return true;
}

void SeqArrayLongSeqTest::InternalSwap(SeqArrayLongSeqTest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  array_long_seq_mem_.InternalSwap(&other->array_long_seq_mem_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeqArrayLongSeqTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestCustomType::InitAsDefaultInstance() {
  ::myprotobuf::_TestCustomType_default_instance_._instance.get_mutable()->test_long_seq_ = const_cast< ::myprotobuf::LongSeqTest*>(
      ::myprotobuf::LongSeqTest::internal_default_instance());
  ::myprotobuf::_TestCustomType_default_instance_._instance.get_mutable()->test_string_ = const_cast< ::myprotobuf::StringTest*>(
      ::myprotobuf::StringTest::internal_default_instance());
  ::myprotobuf::_TestCustomType_default_instance_._instance.get_mutable()->test_string_seq_ = const_cast< ::myprotobuf::StringSeqTest*>(
      ::myprotobuf::StringSeqTest::internal_default_instance());
  ::myprotobuf::_TestCustomType_default_instance_._instance.get_mutable()->test_double_seq_ = const_cast< ::myprotobuf::DoubleSeqTest*>(
      ::myprotobuf::DoubleSeqTest::internal_default_instance());
  ::myprotobuf::_TestCustomType_default_instance_._instance.get_mutable()->test_array_long_seq_ = const_cast< ::myprotobuf::ArrayLongSeqTest*>(
      ::myprotobuf::ArrayLongSeqTest::internal_default_instance());
  ::myprotobuf::_TestCustomType_default_instance_._instance.get_mutable()->seq_array_long_seq_test_ = const_cast< ::myprotobuf::SeqArrayLongSeqTest*>(
      ::myprotobuf::SeqArrayLongSeqTest::internal_default_instance());
}
class TestCustomType::_Internal {
 public:
  static const ::myprotobuf::LongSeqTest& test_long_seq(const TestCustomType* msg);
  static const ::myprotobuf::StringTest& test_string(const TestCustomType* msg);
  static const ::myprotobuf::StringSeqTest& test_string_seq(const TestCustomType* msg);
  static const ::myprotobuf::DoubleSeqTest& test_double_seq(const TestCustomType* msg);
  static const ::myprotobuf::ArrayLongSeqTest& test_array_long_seq(const TestCustomType* msg);
  static const ::myprotobuf::SeqArrayLongSeqTest& seq_array_long_seq_test(const TestCustomType* msg);
};

const ::myprotobuf::LongSeqTest&
TestCustomType::_Internal::test_long_seq(const TestCustomType* msg) {
  return *msg->test_long_seq_;
}
const ::myprotobuf::StringTest&
TestCustomType::_Internal::test_string(const TestCustomType* msg) {
  return *msg->test_string_;
}
const ::myprotobuf::StringSeqTest&
TestCustomType::_Internal::test_string_seq(const TestCustomType* msg) {
  return *msg->test_string_seq_;
}
const ::myprotobuf::DoubleSeqTest&
TestCustomType::_Internal::test_double_seq(const TestCustomType* msg) {
  return *msg->test_double_seq_;
}
const ::myprotobuf::ArrayLongSeqTest&
TestCustomType::_Internal::test_array_long_seq(const TestCustomType* msg) {
  return *msg->test_array_long_seq_;
}
const ::myprotobuf::SeqArrayLongSeqTest&
TestCustomType::_Internal::seq_array_long_seq_test(const TestCustomType* msg) {
  return *msg->seq_array_long_seq_test_;
}
TestCustomType::TestCustomType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:myprotobuf.TestCustomType)
}
TestCustomType::TestCustomType(const TestCustomType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      test_octet_(from.test_octet_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_test_long_seq()) {
    test_long_seq_ = new ::myprotobuf::LongSeqTest(*from.test_long_seq_);
  } else {
    test_long_seq_ = nullptr;
  }
  if (from._internal_has_test_string()) {
    test_string_ = new ::myprotobuf::StringTest(*from.test_string_);
  } else {
    test_string_ = nullptr;
  }
  if (from._internal_has_test_string_seq()) {
    test_string_seq_ = new ::myprotobuf::StringSeqTest(*from.test_string_seq_);
  } else {
    test_string_seq_ = nullptr;
  }
  if (from._internal_has_test_double_seq()) {
    test_double_seq_ = new ::myprotobuf::DoubleSeqTest(*from.test_double_seq_);
  } else {
    test_double_seq_ = nullptr;
  }
  if (from._internal_has_test_array_long_seq()) {
    test_array_long_seq_ = new ::myprotobuf::ArrayLongSeqTest(*from.test_array_long_seq_);
  } else {
    test_array_long_seq_ = nullptr;
  }
  if (from._internal_has_seq_array_long_seq_test()) {
    seq_array_long_seq_test_ = new ::myprotobuf::SeqArrayLongSeqTest(*from.seq_array_long_seq_test_);
  } else {
    seq_array_long_seq_test_ = nullptr;
  }
  test_long_ = from.test_long_;
  // @@protoc_insertion_point(copy_constructor:myprotobuf.TestCustomType)
}

void TestCustomType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestCustomType_ProtobufCustomType_2eproto.base);
  ::memset(&test_long_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&test_long_) -
      reinterpret_cast<char*>(&test_long_seq_)) + sizeof(test_long_));
}

TestCustomType::~TestCustomType() {
  // @@protoc_insertion_point(destructor:myprotobuf.TestCustomType)
  SharedDtor();
}

void TestCustomType::SharedDtor() {
  if (this != internal_default_instance()) delete test_long_seq_;
  if (this != internal_default_instance()) delete test_string_;
  if (this != internal_default_instance()) delete test_string_seq_;
  if (this != internal_default_instance()) delete test_double_seq_;
  if (this != internal_default_instance()) delete test_array_long_seq_;
  if (this != internal_default_instance()) delete seq_array_long_seq_test_;
}

void TestCustomType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestCustomType& TestCustomType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestCustomType_ProtobufCustomType_2eproto.base);
  return *internal_default_instance();
}


void TestCustomType::Clear() {
// @@protoc_insertion_point(message_clear_start:myprotobuf.TestCustomType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_octet_.Clear();
  if (GetArenaNoVirtual() == nullptr && test_long_seq_ != nullptr) {
    delete test_long_seq_;
  }
  test_long_seq_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && test_string_ != nullptr) {
    delete test_string_;
  }
  test_string_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && test_string_seq_ != nullptr) {
    delete test_string_seq_;
  }
  test_string_seq_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && test_double_seq_ != nullptr) {
    delete test_double_seq_;
  }
  test_double_seq_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && test_array_long_seq_ != nullptr) {
    delete test_array_long_seq_;
  }
  test_array_long_seq_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && seq_array_long_seq_test_ != nullptr) {
    delete seq_array_long_seq_test_;
  }
  seq_array_long_seq_test_ = nullptr;
  test_long_ = 0;
  _internal_metadata_.Clear();
}

const char* TestCustomType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // sfixed32 test_long = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          test_long_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // repeated .myprotobuf.Octet test_octet = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_test_octet(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .myprotobuf.LongSeqTest test_long_seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_long_seq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .myprotobuf.StringTest test_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_string(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .myprotobuf.StringSeqTest test_string_seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_string_seq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .myprotobuf.DoubleSeqTest test_double_seq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_double_seq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .myprotobuf.ArrayLongSeqTest test_array_long_seq = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_test_array_long_seq(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .myprotobuf.SeqArrayLongSeqTest seq_array_long_seq_test = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_seq_array_long_seq_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestCustomType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myprotobuf.TestCustomType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // sfixed32 test_long = 1;
  if (this->test_long() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(1, this->_internal_test_long(), target);
  }

  // repeated .myprotobuf.Octet test_octet = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_test_octet_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_test_octet(i), target, stream);
  }

  // .myprotobuf.LongSeqTest test_long_seq = 3;
  if (this->has_test_long_seq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::test_long_seq(this), target, stream);
  }

  // .myprotobuf.StringTest test_string = 4;
  if (this->has_test_string()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::test_string(this), target, stream);
  }

  // .myprotobuf.StringSeqTest test_string_seq = 5;
  if (this->has_test_string_seq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::test_string_seq(this), target, stream);
  }

  // .myprotobuf.DoubleSeqTest test_double_seq = 6;
  if (this->has_test_double_seq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::test_double_seq(this), target, stream);
  }

  // .myprotobuf.ArrayLongSeqTest test_array_long_seq = 7;
  if (this->has_test_array_long_seq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::test_array_long_seq(this), target, stream);
  }

  // .myprotobuf.SeqArrayLongSeqTest seq_array_long_seq_test = 8;
  if (this->has_seq_array_long_seq_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::seq_array_long_seq_test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myprotobuf.TestCustomType)
  return target;
}

size_t TestCustomType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myprotobuf.TestCustomType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .myprotobuf.Octet test_octet = 2;
  total_size += 1UL * this->_internal_test_octet_size();
  for (const auto& msg : this->test_octet_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .myprotobuf.LongSeqTest test_long_seq = 3;
  if (this->has_test_long_seq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_long_seq_);
  }

  // .myprotobuf.StringTest test_string = 4;
  if (this->has_test_string()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_string_);
  }

  // .myprotobuf.StringSeqTest test_string_seq = 5;
  if (this->has_test_string_seq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_string_seq_);
  }

  // .myprotobuf.DoubleSeqTest test_double_seq = 6;
  if (this->has_test_double_seq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_double_seq_);
  }

  // .myprotobuf.ArrayLongSeqTest test_array_long_seq = 7;
  if (this->has_test_array_long_seq()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_array_long_seq_);
  }

  // .myprotobuf.SeqArrayLongSeqTest seq_array_long_seq_test = 8;
  if (this->has_seq_array_long_seq_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *seq_array_long_seq_test_);
  }

  // sfixed32 test_long = 1;
  if (this->test_long() != 0) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestCustomType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myprotobuf.TestCustomType)
  GOOGLE_DCHECK_NE(&from, this);
  const TestCustomType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestCustomType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myprotobuf.TestCustomType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myprotobuf.TestCustomType)
    MergeFrom(*source);
  }
}

void TestCustomType::MergeFrom(const TestCustomType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myprotobuf.TestCustomType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_octet_.MergeFrom(from.test_octet_);
  if (from.has_test_long_seq()) {
    _internal_mutable_test_long_seq()->::myprotobuf::LongSeqTest::MergeFrom(from._internal_test_long_seq());
  }
  if (from.has_test_string()) {
    _internal_mutable_test_string()->::myprotobuf::StringTest::MergeFrom(from._internal_test_string());
  }
  if (from.has_test_string_seq()) {
    _internal_mutable_test_string_seq()->::myprotobuf::StringSeqTest::MergeFrom(from._internal_test_string_seq());
  }
  if (from.has_test_double_seq()) {
    _internal_mutable_test_double_seq()->::myprotobuf::DoubleSeqTest::MergeFrom(from._internal_test_double_seq());
  }
  if (from.has_test_array_long_seq()) {
    _internal_mutable_test_array_long_seq()->::myprotobuf::ArrayLongSeqTest::MergeFrom(from._internal_test_array_long_seq());
  }
  if (from.has_seq_array_long_seq_test()) {
    _internal_mutable_seq_array_long_seq_test()->::myprotobuf::SeqArrayLongSeqTest::MergeFrom(from._internal_seq_array_long_seq_test());
  }
  if (from.test_long() != 0) {
    _internal_set_test_long(from._internal_test_long());
  }
}

void TestCustomType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myprotobuf.TestCustomType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestCustomType::CopyFrom(const TestCustomType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myprotobuf.TestCustomType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestCustomType::IsInitialized() const {
  return true;
}

void TestCustomType::InternalSwap(TestCustomType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  test_octet_.InternalSwap(&other->test_octet_);
  swap(test_long_seq_, other->test_long_seq_);
  swap(test_string_, other->test_string_);
  swap(test_string_seq_, other->test_string_seq_);
  swap(test_double_seq_, other->test_double_seq_);
  swap(test_array_long_seq_, other->test_array_long_seq_);
  swap(seq_array_long_seq_test_, other->seq_array_long_seq_test_);
  swap(test_long_, other->test_long_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestCustomType::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace myprotobuf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::myprotobuf::Octet* Arena::CreateMaybeMessage< ::myprotobuf::Octet >(Arena* arena) {
  return Arena::CreateInternal< ::myprotobuf::Octet >(arena);
}
template<> PROTOBUF_NOINLINE ::myprotobuf::LongSeqTest* Arena::CreateMaybeMessage< ::myprotobuf::LongSeqTest >(Arena* arena) {
  return Arena::CreateInternal< ::myprotobuf::LongSeqTest >(arena);
}
template<> PROTOBUF_NOINLINE ::myprotobuf::DoubleSeqTest* Arena::CreateMaybeMessage< ::myprotobuf::DoubleSeqTest >(Arena* arena) {
  return Arena::CreateInternal< ::myprotobuf::DoubleSeqTest >(arena);
}
template<> PROTOBUF_NOINLINE ::myprotobuf::StringTest* Arena::CreateMaybeMessage< ::myprotobuf::StringTest >(Arena* arena) {
  return Arena::CreateInternal< ::myprotobuf::StringTest >(arena);
}
template<> PROTOBUF_NOINLINE ::myprotobuf::StringSeqTest* Arena::CreateMaybeMessage< ::myprotobuf::StringSeqTest >(Arena* arena) {
  return Arena::CreateInternal< ::myprotobuf::StringSeqTest >(arena);
}
template<> PROTOBUF_NOINLINE ::myprotobuf::ArrayLongSeqTest* Arena::CreateMaybeMessage< ::myprotobuf::ArrayLongSeqTest >(Arena* arena) {
  return Arena::CreateInternal< ::myprotobuf::ArrayLongSeqTest >(arena);
}
template<> PROTOBUF_NOINLINE ::myprotobuf::SeqArrayLongSeqTest* Arena::CreateMaybeMessage< ::myprotobuf::SeqArrayLongSeqTest >(Arena* arena) {
  return Arena::CreateInternal< ::myprotobuf::SeqArrayLongSeqTest >(arena);
}
template<> PROTOBUF_NOINLINE ::myprotobuf::TestCustomType* Arena::CreateMaybeMessage< ::myprotobuf::TestCustomType >(Arena* arena) {
  return Arena::CreateInternal< ::myprotobuf::TestCustomType >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
